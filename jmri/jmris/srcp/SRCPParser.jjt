/* This is a parser grammar for the SRCP protocol written for code generation
with javacc */

options {
  MULTI=true;
  VISITOR=true;
}

PARSER_BEGIN(SRCP_ProtocolParser)

package jmri.jmris.srcp.parser;

public class SRCP_ProtocolParser {


   static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(SRCP_ProtocolParser.class.getName());

  }

PARSER_END(SRCP_ProtocolParser)

// The Tokenizer specification begins here:
SKIP :
{
  <RETURN: "\r">
| <NEWLINE: "\n">
| <SPACE: " ">
  
}

TOKEN :
{
  < ADDR: ( ["0"-"9"] )+ >
| < JMRITURNOUT: ["a"-"z","A"-"Z"] "T" (["0"-"9"])+ >
| < JMRISENSOR: ["a"-"z","A"-"Z"] "S" (["0"-"9"])+ >
| < JMRILIGHT: ["a"-"z","A"-"Z"] "L" (["0"-"9"])+ >
| < NONZEROBUS: ["1"-"9"](["0"-"9"])* >
| < ONOFF: (<ON>|<OFF>) >
| < #ON: <O><N>> 
| < #OFF: <O>(<F>){2} >
| < PROTOCOL: (<A>|<F>|<L>|<P>|<S>|<N>|<M>|<Z>) >
| < DRIVEMODE: ("="|"0"|"1"|"2") >
| < JULDATE: (["1"-"9"]){2,4}["0"-"3"]["0"-"9"]["0"-"9"]>
| < HOUR: (["0"-"2"])?["0"-"9"]>
| < MINSEC: ["0"-"5"]["0"-"9"]>
| < DELAY: ("-")?(["0"-"9"])+>
//| < COMMENT: (~["\n"])+ >
| < EOL :(["\n"]["\r"])+ >
// Device types
| < FB: <F><B> >
| < GA: <G><A> >
| < GL: <G><L> >
| < GM: <G><M> >
| < SM: <S><M> >
| < LOCK: <L><O><C><K> >
| < TIME: <T><I><M><E>>
| < POWER: <P><O><W><E><R>>
| < SESSION: <S><E><S><S><I><O><N>>
| < DESCRIPTION: <D><E><S><C><I><P><T><I><O><N> >
| < SERVER: <S><E><R><V><E><R>>

// commands 
| < GET: <G><E><T> >
| < SET: <S><E><T> >
| < CHECK: <C><H><E><C><K> >
| < INIT: <I><N><I><T> >
| < TERM: <T><E><R><M> >
| < WAIT: <W><A><I><T> >
| < VERIFY: <V><E><R><I><F><Y>>
| < RESET: <R><E><S><E><T>>

| <#A:["a","A"]>
| <#B:["b","B"]>
| <#C:["c","C"]>
| <#D:["d","D"]>
| <#E:["e","E"]>
| <#F:["f","F"]>
| <#G:["g","G"]>
| <#H:["h","H"]>
| <#I:["i","I"]>
| <#K:["k","K"]>
| <#L:["L","L"]>
| <#M:["m","M"]>
| <#N:["n","N"]>
| <#O:["o","O"]>
| <#P:["p","P"]>
| <#R:["r","R"]>
| <#S:["s","S"]>
| <#T:["t","T"]>
| <#W:["w","W"]>
| <#V:["v","V"]>
| <#Y:["y","Y"]>
| <#Z:["z","Z"]>
}

// Lexical specifications begin here

SimpleNode command():{}
{
  // This is a simple list of the possible commands.  
  // They are broken down further below.
  ( LOOKAHEAD(4) get() | set() | check() | wait_cmd() | init() |
                 term() | reset() | verify() )  <EOL>
  {
    log.debug("Command Production");
    return jjtThis;
  }
}

SimpleNode bus():{}
{
  <ADDR>
  {
    log.debug("BUS Production");
    return jjtThis;
  }
}

SimpleNode address():{}
{
  <ADDR>
  {
    log.debug("Address Production");
    return jjtThis;
  }
}

SimpleNode port():{}
{
  <ADDR>
  {
    log.debug("PORT Production");
    return jjtThis;
  }
}

SimpleNode devicegroup():{}
{
  ( <FB> | <GA> | <GL> | <SM> | <TIME> | <SESSION> | <SERVER> | 
    <LOCK> | <DESCRIPTION> )
  {
    log.debug("DeviceGroup Production");
    return jjtThis;
  }
}

SimpleNode get():{}
{
  <GET> bus() ( fb() address() | 
                ga() address() port() | 
                gl() address() | 
                sm() address() | 
                time() | 
                power() | 
                server() | 
                session () | 
                lock() devicegroup() address() | 
                description() [ devicegroup() address() ] )

  {
     log.debug("GET Production");
     return jjtThis;
  }
}

SimpleNode set():{}
{
  <SET> bus() ( gl() | 
                sm() | 
                ga() address() port() zeroone() delay() | 
                fb() | 
                time() | 
                power() onoff() | 
                lock() )
  {
    log.debug("SET Production");
    return jjtThis;
  }
}

SimpleNode term():{}
{
  <TERM> bus()  ( fb() gl() | sm() | power() | server() | lock() )
  {return jjtThis;}
}

SimpleNode check():{}
{
  <CHECK> bus() ( gl() | sm() | ga() <ADDR> <ADDR> <ADDR> <DELAY> | 
                 fb() | time() | power() <ONOFF> | lock() )
  {
    log.debug("Check Production");
    return jjtThis;
  }
}

SimpleNode wait_cmd():{}
{
  <WAIT> bus() ( fb() | time() )

  {
     log.debug("WAIT Production");
     return jjtThis;
  }
}

SimpleNode init():{}
{
  <INIT> bus() ( fb() | ga() | gl() | sm() | time() | power() )
  {
     log.debug("INIT Production");
     return jjtThis;
  }
}

SimpleNode reset():{}
{
  <RESET> bus() <SERVER>
  {
     log.debug("RESET Production");
     return jjtThis;
  }
}

SimpleNode verify():{}
{
  <VERIFY> bus() sm()
  {
     log.debug("RESET Production");
     return jjtThis;
  }
}

SimpleNode gl():{}
{
  <GL>
  {return jjtThis;}
}

SimpleNode sm():{}
{
  <SM>
  {return jjtThis;}
}

SimpleNode ga():{}
{
  <GA>
  {return jjtThis;}
}

SimpleNode fb():{}
{
  <FB>
  {return jjtThis;}
}

SimpleNode time():{}
{
  <TIME> 
  {return jjtThis;}
}

SimpleNode power():{}
{
  <POWER> 
  {return jjtThis;}
}

SimpleNode server():{}
{
  <SERVER> 
  {return jjtThis;}
}

SimpleNode session():{}
{
  <SESSION> 
  {return jjtThis;}
}

SimpleNode lock():{}
{
  <LOCK> 
  {return jjtThis;}
}

SimpleNode description():{}
{
  <DESCRIPTION> 
  {return jjtThis;}
}

SimpleNode comment():{}
{
  //<COMMENT>
  {return jjtThis;}
}

SimpleNode onoff():{}
{
  <ONOFF>
  {return jjtThis;}
}

SimpleNode zeroone():{}
{
  <ADDR>
  {return jjtThis;}
}

SimpleNode delay():{}
{
  <DELAY>
  {return jjtThis;}
}

