
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: plugins.shtml,v 1.7 2010/04/12 12:07:28 jacobsen Exp $ -->
<!-- Translated by Blorec Hervé le 2011-07-06--> <html lang="en">
<head>
    <TITLE>
 	JMRI: Plug-in mechanisms
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code plugins extension plug-in">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset= utf-8
">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">


<h1>JMRI: Mécanismes Plug-in </h1>

L'objectif initial du projet était de produire une bibliothèque JMRI que les gens
pourraient utiliser pour créer leurs propres applications. Bien que certaines personnes l'aient fait, en utilisant plus
 les applications existantes telles que DecoderPro, PanelPro et
JmriDemo. Nous voulons le rendre plus souple en fournissant un moyen d'étendre
ces programmes sans avoir à les reconstruire à partir de zéro. Cette note décrit le
mécanismes de ce qui sera inclus dans JMRI 2.4 et ultérieures.

<OL>

<LI>CLASSPATH
<P>
DecoderPro et les autres sont gérés via une commande java qui fixe le CLASSPATH et diverses options. Comment c'est fait réellement, 
varie en fonction de la plate-forme: csh ,scripts sur Unix, un <a href="StartUpScripts.shtml#windows"> lanceur d'applications </a>
sous Windows, des kits d'applications sous Mac OS X, etc
<P>
Pour  rendre facile l'ajout des plug-ins, ils englobent tous les fichiers. jar dans le répertoire de l'application, et dans son 
sous-répertoire "lib/", dans le CLASSPATH.
<P>
Si vous créez un fichier jar, y compris votre code, il sera automatiquement
trouvé. Vous pouvez aussi mettre vos classes dans les "classes" de l'annuaire
répertoire de démarrage, ce qui est recherché en premier.
<p>
Pour plus d'informations, voir la page<a  href="StartUpScripts.shtml"> sur les scripts de démarrage </a>.

<LI>Remplacement des classes existantes
<P>
Notez que vous pouvez remplacer directement l'un des fichiers dans la distribution jmri.jar
avec vos propres versions en les mettant dans un fichier jar c'est la première recherche.
Par exemple, inclure une version modifiée d'un fichier .properties vous
permet d'inclure des versions personnalisées de menu chaines.
Cela peut aussi être fait avec un fichier .class, par exemple en changeant
l'ordre des items du menu en remplaçant la classe DecoderPro.


<LI> Classes Plugin
<P>
L'emplacement d'une classe peut entraîner un surcroît de travail à long terme, le remplacement d'une
classe peut être modifié quand JMRI évolue. Donc, nous fournissons également un crochet sur lequel
accrocher le nouveau code. Après que l'initialisation soit terminée, les programmes seront
tentés d'invoquer un membre statique de la forme:

<PRE>

  package jmri;
  public class JmriPlugin {
     public static void start(javax.swing.JFrame mainFrame, javax.swing.JMenuBar menuBar) {}
  }

</PRE>
Cette méthode
peut modifier la barre de menus par l'insertion, modification ou la suppression des menus ou le menu
articles, ajouter des boutons sur le panneau principal, etc
<p>
Comme les gens utilisent cette capacité, vous aurez probablement envie de remanier certaines classes existantes
afin de les rendre plus facile à étendre. Par exemple, une mise en forme monolithique de
classe comme llnmon devrait être divisée en plus petits morceaux pour faciliter
l'ajout de nouveaux formats.

</OL>

<h2>Autres Mécanismes</h2>

Il est également possible de personnaliser votre version de JMRI utilisant des 
scripts, et en utilisant les
<a href="../../../package/apps/TabbedPreferences.shtml"> préférences avancées </a>.

<p>
Les scripts peuvent localiser et accéder à n'importe quelle fenêtre ouverte, par exemple.
L'exemple de script
<a href="http://jmri.org/jython/AddButton.py"> AddButton.py </a>
 est un exemple de l'ajout d'un bouton de script sur la fenêtre principale.
L'
<a href="http://jmri.org/jython/DisableOpsMode.py"> DisableOpsMode.py </a>
montre un exemple de script pour comment faire pour modifier la fenêtre principale et supprimer le
bouton de programmation voie principale.


L'exemple de script 
<a href="http://jmri.org/jython/ReporterFontControl.py"> ReporterFontControl.py </a>
 est un exemple encore plus avancés qui
modifie l'apparence des éléments sur les écrans du panneau.
<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>
