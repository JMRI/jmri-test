/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jmri.profile;

import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import jmri.swing.PreferencesPanel;
import jmri.util.FileUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author rhwood
 */
public class ProfilePreferencesPanel extends JPanel implements PreferencesPanel {

    private static final Logger log = LoggerFactory.getLogger(ProfilePreferencesPanel.class);

    /**
     * Creates new form ProfilePreferencesPanel
     */
    public ProfilePreferencesPanel() {
        initComponents();
        ProfileManager.defaultManager().addPropertyChangeListener(ProfileManager.PROFILES, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                profiles.repaint();
            }
        });
        ProfileManager.defaultManager().addPropertyChangeListener(ProfileManager.DISABLED_PROFILES, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                disabledProfiles.repaint();
            }
        });
        ProfileManager.defaultManager().addPropertyChangeListener(ProfileManager.SEARCH_PATHS, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                searchPaths.repaint();
            }
        });
        this.chkStartWithActiveProfile.setSelected(ProfileManager.defaultManager().isAutoStartActiveProfile());
        profiles.setSelectedValue(ProfileManager.defaultManager().getActiveProfile(), true);
        this.profilesValueChanged(null);
        // Hide until I can figure out good way to export a profile
        // Should I include items in external user/roster/etc directories?
        this.btnExportDisabledProfile.setVisible(false);
        this.btnExportProfile.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new JTabbedPane();
        jPanel1 = new JPanel();
        chkStartWithActiveProfile = new JCheckBox();
        jLabel1 = new JLabel();
        jScrollPane1 = new JScrollPane();
        profiles = new JList();
        btnDisableProfile = new JButton();
        btnOpenExistingProfile = new JButton();
        btnCreateNewProfile = new JButton();
        btnActivateProfile = new JButton();
        btnExportProfile = new JButton();
        jPanel3 = new JPanel();
        jLabel3 = new JLabel();
        jScrollPane3 = new JScrollPane();
        disabledProfiles = new JList();
        btnDeleteProfile = new JButton();
        btnEnableProfile = new JButton();
        btnExportDisabledProfile = new JButton();
        jPanel2 = new JPanel();
        jLabel2 = new JLabel();
        jScrollPane2 = new JScrollPane();
        searchPaths = new JList();
        btnRemoveSearchPath = new JButton();
        btnAddSearchPath = new JButton();

        ResourceBundle bundle = ResourceBundle.getBundle("jmri/profile/Bundle"); // NOI18N
        chkStartWithActiveProfile.setText(bundle.getString("ProfilePreferencesPanel.chkStartWithActiveProfile.text")); // NOI18N
        chkStartWithActiveProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.chkStartWithActiveProfile.toolTipText")); // NOI18N
        chkStartWithActiveProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chkStartWithActiveProfileActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("ProfilePreferencesPanel.jLabel1.text")); // NOI18N

        profiles.setModel(new ProfileListModel());
        profiles.setSelectedValue(ProfileManager.defaultManager().getActiveProfile(), true);
        profiles.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                profilesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(profiles);

        btnDisableProfile.setText(bundle.getString("ProfilePreferencesPanel.btnDisableProfile.text")); // NOI18N
        btnDisableProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnDisableProfile.toolTipText")); // NOI18N
        btnDisableProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnDisableProfileActionPerformed(evt);
            }
        });

        btnOpenExistingProfile.setText(bundle.getString("ProfilePreferencesPanel.btnOpenExistingProfile.text")); // NOI18N
        btnOpenExistingProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnOpenExistingProfile.toolTipText")); // NOI18N
        btnOpenExistingProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnOpenExistingProfileActionPerformed(evt);
            }
        });

        btnCreateNewProfile.setText(bundle.getString("ProfilePreferencesPanel.btnCreateNewProfile.text")); // NOI18N
        btnCreateNewProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnCreateNewProfile.toolTipText")); // NOI18N
        btnCreateNewProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnCreateNewProfileActionPerformed(evt);
            }
        });

        btnActivateProfile.setText(bundle.getString("ProfilePreferencesPanel.btnActivateProfile.text")); // NOI18N
        btnActivateProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnActivateProfile.toolTipText")); // NOI18N
        btnActivateProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnActivateProfileActionPerformed(evt);
            }
        });

        btnExportProfile.setText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.text")); // NOI18N
        btnExportProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.toolTipText")); // NOI18N
        btnExportProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnExportProfileActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(chkStartWithActiveProfile)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnActivateProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnOpenExistingProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCreateNewProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDisableProfile)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExportProfile)))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDisableProfile)
                    .addComponent(btnOpenExistingProfile)
                    .addComponent(btnCreateNewProfile)
                    .addComponent(btnActivateProfile)
                    .addComponent(btnExportProfile))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkStartWithActiveProfile)
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("ProfilePreferencesPanel.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jLabel3.setText(bundle.getString("ProfilePreferencesPanel.jLabel3.text")); // NOI18N

        disabledProfiles.setModel(new DisabledProfileListModel());
        jScrollPane3.setViewportView(disabledProfiles);

        btnDeleteProfile.setText(bundle.getString("ProfilePreferencesPanel.btnDeleteProfile.text")); // NOI18N
        btnDeleteProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnDeleteProfile.toolTipText")); // NOI18N

        btnEnableProfile.setText(bundle.getString("ProfilePreferencesPanel.btnEnableProfile.text")); // NOI18N
        btnEnableProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnEnableProfile.toolTipText")); // NOI18N
        btnEnableProfile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnEnableProfileActionPerformed(evt);
            }
        });

        btnExportDisabledProfile.setText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.text")); // NOI18N
        btnExportDisabledProfile.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnExportProfile.toolTipText")); // NOI18N

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnEnableProfile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteProfile)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportDisabledProfile)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteProfile)
                    .addComponent(btnEnableProfile)
                    .addComponent(btnExportDisabledProfile))
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("ProfilePreferencesPanel.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        jLabel2.setText(bundle.getString("ProfilePreferencesPanel.jLabel2.text")); // NOI18N

        searchPaths.setModel(new SearchPathsListModel());
        searchPaths.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                searchPathsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(searchPaths);

        btnRemoveSearchPath.setText(bundle.getString("ProfilePreferencesPanel.btnRemoveSearchPath.text")); // NOI18N
        btnRemoveSearchPath.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnRemoveSearchPath.toolTipText")); // NOI18N
        btnRemoveSearchPath.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnRemoveSearchPathActionPerformed(evt);
            }
        });

        btnAddSearchPath.setText(bundle.getString("ProfilePreferencesPanel.btnAddSearchPath.text")); // NOI18N
        btnAddSearchPath.setToolTipText(bundle.getString("ProfilePreferencesPanel.btnAddSearchPath.toolTipText")); // NOI18N
        btnAddSearchPath.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnAddSearchPathActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAddSearchPath)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemoveSearchPath)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddSearchPath)
                            .addComponent(btnRemoveSearchPath))))
                .addContainerGap())
        );

        jTabbedPane1.addTab(bundle.getString("ProfilePreferencesPanel.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDisableProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDisableProfileActionPerformed
        if (profiles.getModel().getSize() > 1) {
            try {
                ((Profile) profiles.getSelectedValue()).setDisabled(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Error disabling profile", JOptionPane.ERROR_MESSAGE);
                log.error("Unable to disable profile", ex.getLocalizedMessage());
            }
            profiles.repaint();
        }
    }//GEN-LAST:event_btnDisableProfileActionPerformed

    private void btnActivateProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnActivateProfileActionPerformed
        try {
            ProfileManager.defaultManager().saveActiveProfile((Profile) profiles.getSelectedValue(), ProfileManager.defaultManager().isAutoStartActiveProfile());
        } catch (IOException ex) {
            log.error("Unable to save profile preferences", ex);
            JOptionPane.showMessageDialog(this, "Usable to save profile preferences.\n" + ex.getLocalizedMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnActivateProfileActionPerformed

    private void btnOpenExistingProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnOpenExistingProfileActionPerformed
        JFileChooser chooser = new JFileChooser(FileUtil.getPreferencesPath());
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.setFileFilter(new ProfileFileFilter());
        chooser.setFileView(new ProfileFileView());
        // TODO: Use NetBeans OpenDialog if its availble
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                Profile p = new Profile(chooser.getSelectedFile());
                ProfileManager.defaultManager().addProfile(p);
                profiles.setSelectedValue(p, true);
                if (p.isDisabled()) {
                    // TODO: Display dialog asking if profile should be enabled
                }
            } catch (IOException ex) {
                log.warn("{} is not a profile directory", chooser.getSelectedFile());
                // TODO: Display error dialog - selected file is not a profile directory
            }
        }
    }//GEN-LAST:event_btnOpenExistingProfileActionPerformed

    private void btnCreateNewProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCreateNewProfileActionPerformed
        AddProfileDialog apd = new AddProfileDialog((Frame) SwingUtilities.getWindowAncestor(this), true);
        apd.setLocationRelativeTo(this);
        apd.setVisible(true);
    }//GEN-LAST:event_btnCreateNewProfileActionPerformed

    private void btnEnableProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnEnableProfileActionPerformed
        try {
            ((Profile) disabledProfiles.getSelectedValue()).setDisabled(false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Error enabling profile", JOptionPane.ERROR_MESSAGE);
            log.error("Unable to enable profile", ex.getLocalizedMessage());
        }
        disabledProfiles.repaint();
    }//GEN-LAST:event_btnEnableProfileActionPerformed

    private void btnAddSearchPathActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnAddSearchPathActionPerformed
        JFileChooser chooser = new JFileChooser(FileUtil.getPreferencesPath());
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setFileFilter(new ProfileFileFilter());
        chooser.setFileView(new ProfileFileView());
        // TODO: Use NetBeans OpenDialog if its availble
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            ProfileManager.defaultManager().addSearchPath(chooser.getSelectedFile());
            searchPaths.setSelectedValue(chooser.getSelectedFile(), true);
        }
    }//GEN-LAST:event_btnAddSearchPathActionPerformed

    private void btnRemoveSearchPathActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnRemoveSearchPathActionPerformed
        ProfileManager.defaultManager().removeSearchPath((File) searchPaths.getSelectedValue());
    }//GEN-LAST:event_btnRemoveSearchPathActionPerformed

    private void searchPathsValueChanged(ListSelectionEvent evt) {//GEN-FIRST:event_searchPathsValueChanged
        if (searchPaths.getSelectedValue().equals(new File(FileUtil.getPreferencesPath()))) {
            this.btnRemoveSearchPath.setEnabled(false);
        } else {
            this.btnRemoveSearchPath.setEnabled(true);
        }
    }//GEN-LAST:event_searchPathsValueChanged

    private void profilesValueChanged(ListSelectionEvent evt) {//GEN-FIRST:event_profilesValueChanged
        if (profiles.getSelectedValue().equals(ProfileManager.defaultManager().getActiveProfile())) {
            this.btnDisableProfile.setEnabled(false);
            this.btnActivateProfile.setEnabled(false);
        } else {
            this.btnDisableProfile.setEnabled(true);
            this.btnActivateProfile.setEnabled(true);
        }
    }//GEN-LAST:event_profilesValueChanged

    private void btnExportProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnExportProfileActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("ZIP Archives", "zip"));
        chooser.setFileView(new ProfileFileView());
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            // TODO: make ZIP archive of Profile
        }
    }//GEN-LAST:event_btnExportProfileActionPerformed

    private void chkStartWithActiveProfileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chkStartWithActiveProfileActionPerformed
        ProfileManager.defaultManager().setAutoStartActiveProfile(this.chkStartWithActiveProfile.isSelected());
        try {
            ProfileManager.defaultManager().saveActiveProfile();
        } catch (IOException ex) {
            log.error("Unable to save active profile.", ex);
        }
    }//GEN-LAST:event_chkStartWithActiveProfileActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnActivateProfile;
    private JButton btnAddSearchPath;
    private JButton btnCreateNewProfile;
    private JButton btnDeleteProfile;
    private JButton btnDisableProfile;
    private JButton btnEnableProfile;
    private JButton btnExportDisabledProfile;
    private JButton btnExportProfile;
    private JButton btnOpenExistingProfile;
    private JButton btnRemoveSearchPath;
    private JCheckBox chkStartWithActiveProfile;
    private JList disabledProfiles;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JTabbedPane jTabbedPane1;
    private JList profiles;
    private JList searchPaths;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getPreferencesItem() {
        return "Profiles";
    }

    @Override
    public String getPreferencesItemText() {
        return "Profiles";
    }

    @Override
    public String getTabbedPreferencesTitle() {
        return null;
    }

    @Override
    public String getLabelKey() {
        return null;
    }

    @Override
    public JComponent getPreferencesComponent() {
        return this;
    }

    @Override
    public boolean isPersistant() {
        return false;
    }

    @Override
    public String getPreferencesTooltip() {
        return null;
    }

    @Override
    public void savePreferences() {
        // Nothing to do since ProfileManager preferences are saved immediately
    }

    private static class ZipFileFilter extends FileFilter {

        public ZipFileFilter() {
        }

        @Override
        public boolean accept(File f) {
            if (!f.isDirectory()) {
                int i = f.getName().lastIndexOf('.');
                if (i > 0 && i < f.getName().length() - 1) {
                    return f.getName().substring(i + 1).toLowerCase().equalsIgnoreCase("zip"); // NOI18N
                }
                return false;
            }
            return true;
        }

        @Override
        public String getDescription() {
            return "Zip archives (.zip)";
        }
    }
}
