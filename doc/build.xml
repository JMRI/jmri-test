<?xml version="1.0" encoding="UTF-8"?>
<project name="docbook" default="all" basedir="..">

    <!--
    basedir=".." defines all paths relative to the top level directory in the
    project. This ensures that basedir is the same if this build.xml is invoked
    within or without the context of the main JMRI build.xml
    -->
    
    <description>
        Transform DocBook XML to various outputs
    </description>

    <!-- Define base properties -->
    <property name="doc.dir" value="${basedir}/doc" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="src.dir" value="${doc.dir}/DecoderPro_Users_Guide" />
    <property name="build.dir" value="${doc.dir}/build" />
    <property name="common.content" value="common-db5" />
    <property name="src.common.dir" value="${doc.dir}/${common.content}" />
    <property name="output.dir" value="${doc.dir}/output" />
    <property name="docbook.xsl.dir" value="${doc.dir}/docbook-xsl-ns-1.78.1" />
    <property name="html.stylesheet" value="${docbook.xsl.dir}/html/docbook.xsl" />

    <!--
    - Sets up the classpath for the Xalan and Xerces implementations
    - that are to be used in this script, since the versions that ship
    - with Ant may be out of date.
    -->
    <path id="xalan.classpath">
        <fileset dir="${lib.dir}" id="xalan.fileset">
            <include name="xalan.jar" />
            <include name="xercesImpl.jar" />
        </fileset>
    </path>

    <!-- copies the localized directories from common into the localized directories
    in the fileset as Common_Content -->
    <scriptdef name="copy-common-content" language="javascript">
        <attribute name="common"/>
        <element name="fileset" type="fileset"/>
    <![CDATA[
    var File = Java.type("java.io.File");

    languages = {};
    common = new File(attributes.get("common"));
    bookDirs = elements.get("fileset");
    for (i = 0; i < bookDirs.size(); ++i) {
        bookset = bookDirs.get(i);
        scanner = bookset.getDirectoryScanner(project);
        scanner.scan();
        books = scanner.getIncludedDirectories();
        for (j = 0; j < books.length; j++) {
            basedir = bookset.getDir(project);
            book = new File(basedir, books[j]);
            lang = book.getName();
            dest = new File(book, "Common_Content");
            if (!(lang in languages)) {
                dir = new File(common, lang);
                fileset = project.createDataType('fileset');
                fileset.setDir(dir);
                fileset.setIncludes('**');
                languages[lang] = fileset;
            }
            copy = project.createTask("copy");
            copy.addFileset(languages[lang]);
            copy.setTodir(dest);
            copy.execute();
        }
    }
    ]]>
    </scriptdef>
  
    <!-- - target: usage -->
    <target name="usage" description="Prints help">
        <echo message="Use -projecthelp to get a list of the available targets." />
    </target>

    <target name="-clean-build-dir" description="Creates up build dir.">
        <delete dir="${build.dir}" />
    </target>

    <target name="-clean-output-dir" description="Creates up output dir.">
        <delete dir="${output.dir}" />
    </target>

    <!-- - target: clean -->
    <target name="clean" depends="-clean-output-dir, -clean-build-dir" description="Cleans up generated files.">
    </target>

    <!-- - target: depends -->
    <target name="createtargetdir" description="Generate targetdir.">
        <mkdir dir="${output.dir}" />
        <mkdir dir="${output.dir}/images" />
    </target>

    <target name="-create-build-dir" description="Generate and populate build dir.">
        <mkdir dir="${build.dir}" />
        <copy todir="${build.dir}">
            <fileset dir="${doc.dir}" casesensitive="yes">
                <patternset>
                    <include name="**/??-??/**" />
                    <exclude name="${common.content}/**" />
                    <exclude name="build/**" />
                </patternset>
            </fileset>
        </copy>
    </target>

    <target name="build-html" depends="-clean-output-dir, -create-build-dir, createtargetdir"
            description="Generates HTML5 files">
        <echo message="Building HTML5 output" />

        <!-- Copy common content into sources directories -->
        <copy-common-content common="${src.common.dir}">
            <fileset dir="${build.dir}" casesensitive="yes">
                <patternset>
                    <include name="**/??-??" />
                    <exclude name="${common.content}/??-??" />
                </patternset>
            </fileset>
        </copy-common-content>
            
        <!-- Copy the stylesheet to the same directory as the HTML files - ->
        <copy todir="${output.dir}">
            <fileset dir="css">
                <include name="style.css" />
            </fileset>
        </copy>
        -->
        <!-- Copy the images to the same directory as the HTML files - ->
        <copy todir="${output.dir}\images">
            <fileset dir="${input.dir}\images">
                <include name="title.png" />
            </fileset>
        </copy>
        -->
        <!-- Transfer to HTML -->
        <xslt style="${html.stylesheet}" extension=".html" basedir="${build.dir}"
              destdir="${output.dir}">
            <selector>
                <filename regex="(.*?)/.*/\1\.xml" />
            </selector>
            <param name="html.stylesheet" expression="style.css" />
            <param name="docbook.css.source" expression="" />
            <param name="section.autolabel" expression="1" />
            <param name="make.clean.html" expression="1" />
            <outputproperty name="indent" value="yes" />
            <classpath refid="xalan.classpath" />
            <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                         value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
        </xslt>
    </target>

</project>
