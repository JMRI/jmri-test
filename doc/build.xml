<?xml version="1.0" encoding="UTF-8"?>
<project name="docbook" default="all" basedir="..">

    <!--
    basedir=".." defines all paths relative to the top level directory in the
    project. This ensures that basedir is the same if this build.xml is invoked
    within or without the context of the main JMRI build.xml
    -->
    
    <description>
        Transform DocBook XML to various outputs
    </description>

    <!-- Define base properties -->
    <property name="doc.dir" value="${basedir}/doc" />
    <property name="lib.dir" value="${basedir}/lib" />
    <property name="src.dir" value="${doc.dir}/DecoderPro_Users_Guide" />
    <property name="build.dir" value="${doc.dir}/build" />
    <property name="common.content" value="common-db5" />
    <property name="src.common.dir" value="${doc.dir}/${common.content}" />
    <property name="output.dir" value="${doc.dir}/output" />
    <property name="docbook.xsl" value="docbook-xsl-ns-1.78.1" />
    <property name="docbook.xsl.dir" value="${doc.dir}/${docbook.xsl}" />
    <property name="html.single.stylesheet" value="${docbook.xsl.dir}/html/onechunk.xsl" />
    <property name="html.chunked.stylesheet" value="${docbook.xsl.dir}/html/chunk.xsl" />
    <property name="pdf.stylesheet" value="${docbook.xsl.dir}/fo/docbook.xsl" />
    <property name="fop.home" value="lib/fop-2.0" />

    <!--
    - Sets up the classpath for the Xalan and Xerces implementations
    - that are to be used in this script, since the versions that ship
    - with Ant may be out of date.
    -->
    <path id="xalan.classpath">
        <fileset dir="${lib.dir}" id="xalan.fileset">
            <include name="xalan.jar" />
            <include name="xercesImpl.jar" />
        </fileset>
    </path>
    
    <path id="fop.classpath">
        <fileset refid="xalan.fileset" />
        <fileset dir="${lib.dir}" id="fop.fileset">
            <include name="avalon-framework-4.2.0.jar" />
            <include name="batik-all-1.8.jar" />
            <include name="commons-io-1.3.1.jar" />
            <include name="commons-logging-1.0.4.jar" />
            <include name="fontbox-1.8.5.jar" />
            <include name="fop.jar" />
            <include name="xml-apis-1.3.04.jar" />
            <include name="xml-apis-ext-1.3.04.jar" />
            <include name="xmlgraphics-commons-2.0.1.jar" />
        </fileset>
    </path>

    <!--
    Docbook books and articles in the form name/language/name.xml
    exclude XSL and build directories
    -->
    <fileset dir="${doc.dir}">
        <selector id="src.books">
            <and>
                <filename regex="(.*?)/.*?/\1\.xml" />
                <filename name="${docbook.xsl}/**" negate="true" />
                <filename name="build/**" negate="true" />
            </and>
        </selector>
    </fileset>
    
    <!--
    Given a fileset of files, copy the directory containing each file
    into todir
    -->
    <scriptdef name="copy-parent" language="javascript">
        <attribute name="todir"/>
        <element name="fileset" type="fileset"/>
    <![CDATA[
    var File = Java.type("java.io.File");

    todir = new File(attributes.get("todir"));
    files = elements.get("fileset");
    for (i = 0; i < files.size(); ++i) {
        fileset = files.get(i);
        dirset = project.createDataType('fileset');
        dirset.setDir((new File(fileset.getDir(project), fileset)).getParentFile());
        self.log("copy-parent: parent dir is " + dirset.getDir());
        dirset.setIncludes('**');
        copy = project.createTask('copy');
        copy.addFileset(dirset);
        copy.setTodir((new File(todir, fileset)).getParentFile());
        copy.execute();
    }
    ]]>
    </scriptdef>
    
    <!--
    Copies the localized directories from src.common.dir into the
    localized directories in the fileset as Common_Content given a
    fileset that contains files within the localized directories
    -->
    <scriptdef name="copy-common-content" language="javascript">
        <attribute name="common"/>
        <element name="fileset" type="fileset"/>
    <![CDATA[
    var File = Java.type("java.io.File");

    languages = {};
    common = new File(attributes.get("common"));
    files = elements.get("fileset");
    for (i = 0; i < files.size(); ++i) {
        bookset = files.get(i);
        bookdir = (new File(bookset.getDir(project), bookset)).getParentFile()
        lang = bookdir.getName();
        dest = new File(bookdir, "Common_Content");
        if (!(lang in languages)) {
            dir = new File(common, lang);
            fileset = project.createDataType('fileset');
            fileset.setDir(dir);
            fileset.setIncludes('**');
            languages[lang] = fileset;
        }
        copy = project.createTask("copy");
        copy.addFileset(languages[lang]);
        copy.setTodir(dest);
        copy.execute();
    }
    ]]>
    </scriptdef>
  
    <target name="usage" description="Prints help">
        <echo message="Use -projecthelp to get a list of the available targets." />
    </target>

    <target name="build" depends="build-html-chunked, build-html-single, build-pdf" description="Builds documents." />

    <target name="clean" depends="-clean-output-dir, -clean-build-dir" description="Cleans up generated files.">
    </target>

    <target name="-clean-build-dir" description="Creates up build dir.">
        <delete dir="${build.dir}" />
    </target>

    <target name="-clean-output-dir" description="Creates up output dir.">
        <delete dir="${output.dir}" />
    </target>

    <target name="createtargetdir" description="Generate targetdir.">
        <mkdir dir="${output.dir}" />
        <mkdir dir="${output.dir}/images" />
    </target>

    <target name="-create-build-dir" description="Generate and populate build dir.">
        <mkdir dir="${build.dir}" />
        
        <!-- copy books into build directory -->
        <copy-parent todir="${build.dir}">
            <fileset dir="${doc.dir}" casesensitive="yes">
                <selector refid="src.books" />
            </fileset>
        </copy-parent>

        <!-- Copy common content into books in build directory -->
        <copy-common-content common="${src.common.dir}">
            <fileset dir="${build.dir}" casesensitive="yes">
                <selector refid="src.books" />
            </fileset>
        </copy-common-content>
    </target>

    <!-- For some reason both build-html-* targets create empty
    name/lang/name.html file. This removes them. -->
    <macrodef name="remove-empty-output">
        <sequential>
            <delete>
                <fileset dir="${output.dir}" casesensitive="yes">
                    <selector>
                        <filename regex="(.*?)/.*?/\1\.html" />
                    </selector>
                </fileset>
            </delete>
        </sequential>
    </macrodef>
    
    <target name="build-html-chunked" depends="-clean-output-dir, -create-build-dir, createtargetdir"
            description="Generates HTML5 multiple document files">
        <echo message="Building HTML5 multiple document output" />
            
        <!-- Copy the stylesheet to the same directory as the HTML files - ->
        <copy todir="${output.dir}">
            <fileset dir="css">
                <include name="style.css" />
            </fileset>
        </copy>
        -->
        <!-- Copy the images to the same directory as the HTML files - ->
        <copy todir="${output.dir}\images">
            <fileset dir="${input.dir}\images">
                <include name="title.png" />
            </fileset>
        </copy>
        -->
        <!-- Transfer to HTML -->
        <xslt style="${html.chunked.stylesheet}" basedir="${build.dir}"
              destdir="${output.dir}">
            <selector refid="src.books" />
            <param name="html.stylesheet" expression="style.css" />
            <param name="docbook.css.source" expression="" />
            <param name="section.autolabel" expression="1" />
            <param name="make.clean.html" expression="1" />
            <outputproperty name="indent" value="yes" />
            <classpath refid="xalan.classpath" />
            <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                         value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
        </xslt>
        <remove-empty-output />
    </target>
    
    <target name="build-html-single" depends="-clean-output-dir, -create-build-dir, createtargetdir"
            description="Generates HTML5 single document files">
        <echo message="Building HTML5 single document output" />
            
        <!-- Copy the stylesheet to the same directory as the HTML files - ->
        <copy todir="${output.dir}">
            <fileset dir="css">
                <include name="style.css" />
            </fileset>
        </copy>
        -->
        <!-- Copy the images to the same directory as the HTML files - ->
        <copy todir="${output.dir}\images">
            <fileset dir="${input.dir}\images">
                <include name="title.png" />
            </fileset>
        </copy>
        -->
        <!-- Transfer to HTML -->
        <xslt style="${html.single.stylesheet}" extension=".html" basedir="${build.dir}"
              destdir="${output.dir}">
            <selector refid="src.books" />
            <param name="html.stylesheet" expression="style.css" />
            <param name="root.filename" expression="index-single" />
            <param name="docbook.css.source" expression="" />
            <param name="section.autolabel" expression="1" />
            <param name="make.clean.html" expression="1" />
            <outputproperty name="indent" value="yes" />
            <classpath refid="xalan.classpath" />
            <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                         value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
        </xslt>
        <remove-empty-output />
    </target>
    
    <target name="build-pdf" depends="-clean-output-dir, -create-build-dir, createtargetdir" description="Generates PDF files from DocBook XML">
        <xslt style="${pdf.stylesheet}" extension=".fo" 
              basedir="${build.dir}" destdir="${build.dir}">
            <selector refid="src.books" />
            <classpath refid="xalan.classpath" />
            <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                         value="org.apache.xerces.parsers.XIncludeParserConfiguration" />        
        </xslt>

        <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
            <classpath refid="fop.classpath" />
        </taskdef>

        <fop format="application/pdf" outdir="${output.dir}">
            <fileset dir="${build.dir}" includes="**/*.fo" />
        </fop>
    </target>
</project>
