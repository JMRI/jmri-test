<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<!-- Copyright Me 2008 -->
<!-- $Id: Audio.shtml,v 1.4 2009-10-02 21:30:45 jacobsen Exp $ -->
<title>JMRI: Audio</title>

<!-- Style -->
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/default.css"
	MEDIA="screen">
<LINK REL="stylesheet" TYPE="text/css" HREF="/css/print.css"
	MEDIA="print">
<LINK REL="icon" HREF="/images/jmri.ico" TYPE="image/png">
<LINK REL="home" TITLE="Home" HREF="/">
<!-- /Style -->
</HEAD>

<BODY>
<!--#include virtual="/Header" -->
  <div class="nomenu" id="mBody">
    <div id="mainContent">


<h2>JMRI: Audio</h2>

JMRI audio objects hold information about sounds that can be played-back by the
computer.

<h3>The Audio Table</h3>
The 
<a href="../../package/jmri/jmrit/beantable/AudioTable.shtml">Audio Table</a>
lets you see what audio objects have been defined, and what information
they currently contain. From the table, you can 
<a href="../../package/jmri/jmrit/beantable/AudioAddEdit.shtml">create a new audio object</a>.
<a href="../../package/jmri/jmrit/beantable/AudioTable.jpg">
<img src="../../package/jmri/jmrit/beantable/AudioTable.jpg" height="178" width="420">
</a>

<h3>Audio Objects</h3>
The JMRI audio framework consists of three distinct types of object:
<ul>
<li>Audio Listeners
<li>Audio Buffers
<li>Audio Sources
</ul>

<h4>Audio Listener</h4>

The Audio Listener defines where the person hearing the sounds is located.
<p>
<a href="images/EditAudioListener.png">
<img src="images/EditAudioListener.png" height="187" width="122">
</a>
<p>
The defined listener position is then used to calculate the 
actual pan and gain of each audio source when played back.
<p>
The orientation settings define the co-ordinate system in use. 
The default values transpose to:
<ul>
<li>x - left-to-right (-ve to +ve)
<li>y - front-to-back (-ve to +ve)
<li>z - down-to-up (-ve to +ve)
</ul>
With the default position, 'y' values would be positive, 
measured from the front-edge of the layout and 
'x' values to be negative to the left of the layout centre-line 
and positive to the right of the layout centre-line. 
Positive 'z' values would be measured from layout level upwards.
<p>
Unless modifed by changing 'Meters per unit', 
all distance and velocity units are measured in real-world meters.
<p>
Only one Audio Listener can exist.

<h4>Audio Buffers</h4>

An Audio Buffer holds the actual sound sample data.
<p>
<a href="images/AddEditAudioBuffer.png">
<img src="images/AddEditAudioBuffer.png" height="93" width="176">
</a>
<p>
To load an Audio Buffer with sound data, click the 'Browse...' button and select the appropriate '.wav' file.
<p>
One Audio Buffer object can be used by many Audio Sources.

<h4>Audio Sources</h4>

An Audio Source controls the playback of sound sample data and controls the position.
<p>
<a href="images/AddEditAudioSource.png">
<img src="images/AddEditAudioSource.png" height="241" width="123">
</a>
<p>
To actually play a sound, an Audio Source must be linked to an existing Audio Buffer 
- choose one from the drop-down list.
Buffers are allowed to be shared between Audio Sources, 
in which case they will be played back independently.
<p>
As with the Audio Listener, an Audio Source should be positioned in 3d-space.
If required to 'move' whilst playing, set the velocity in x, y and z directions.
<p>
If it is necessary to turn-down the volume of a specific Audio Source, this can be achieved by changing the 'Gain' setting.
Similarly, the pitch can be modified by changing the 'Pitch' parameter.
<p>
Normal behaviour is for the volume of an Audio Source to be altered by the distance from the Audio Listener. This behaviour can be modified by altering the Reference Distance and Maximum Distance settings. The Reference Distance determines the distance at which the volume will start to decrease - at distances smaller than the reference distance, the volume of the Audio Source will be as defined by the gain setting. The Maximum Distance determines the distance at which the volume is zero. Roll-off Factor determines the rate-of-change of the gain with respect to distance - larger values denote a faster rate-of-change.
<p>
Finally, the fade-in and fade-out times of the Audio Source can be defined - these are specified in milli-seconds. Fading-in and out of an Audio Source is achieved by using the fadeIn and fadeOut methods of the Audio Source; play, stop and pause methods do not utilise fade times.
<p>
Unless modified by changing the 'Meters per unit' parameter of the Audio Listener, all distance and velocity units are measured in real-world meters.

<h3>Using Audio Objects with Logix</h3>

A Logix can be defined to control audio objects. Currently, it is possible to
play, pause, stop, rewind, fade-in and fade-out audio sources.

<h3>Using Audio Objects with Scripts</h3>
You can directly manipulate Audio Objects with scripts.  
There's an 
<a href="http://jmri.org/jython/AudioExample.py">example script</a>
in the distribution, along with documentation for the 
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/audio/AudioBuffer.html">AudioBuffer</a>,
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/audio/AudioSource.html">AudioSource</a> and
<a href="http://jmri.org/JavaDoc/doc/jmri/jmrit/audio/AudioListener.html">AudioListener</a>
classes that control the audio processing.
<!--#include virtual="/Footer" -->
</body>
</html>
