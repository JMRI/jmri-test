<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: index.shtml,v 1.1 2008-02-06 07:07:56 jacobsen Exp $ -->
<html lang="en">
<head>
  <TITLE>
 	JMRI: Block Tracking
  </TITLE>
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">

  <META content="Bob Jacobsen" name=Author>

  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="keywords"
        content="java model railroad JMRI block tracking">

<!-- Style -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
<link rel="icon" href="/images/jmri.ico" TYPE="image/png">
<link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->

<!--#include virtual="Sidebar" -->
<div id="mainContent">

    <H2>
    JMRI: Block Tracking
    </H2>

    <h3>
    Background Information
    </h3>

    Model railroad control systems generally can't tell you which
    train occupies a particular piece of track at any given time.
    <P>
    This is unfortunate, because there are lots of reasons you might
    want to know.  For example, you might want to command any train
    that reaches a particular red signal to stop.  But you can't do that
    unless you know <i>which</i> train it is that is reaching the signal.
    <P>
    Starting with test version 1.7.5, JMRI provides experimental
    tools for tracking trains as them move around on the layout.

    <h3>
    Basic Concepts
    </h3>

    Imagine a simple loop of track that's been wired with occupancy 
    sensors on individual segments of track, which we'll call "blocks".
    Imagine the train is in block A, and will shortly move to 
    block B, then C.
    <P>
    At first the sensor for block A is showing active.  As the train moves into
    block B, the sensor for B will go active.  When the train has completely left
    A, it's sensor will go inactive.  Etc.
    <P>
    Although a particular block only knows whether it's active or 
    not (occupied or not), by also looking at the occupancy of the
    adjacent blocks it can tell more.  In the example above, if the code 
    knew that train 321 was in block A, when block B goes active, the program
    can infer that 321 is now also in block B.
    <P>
    This doesn't always work, unfortunately.  Imagine the case above, where there
    is both a train in A and also a train in C.  When B goes from inactive to
    active (unoccupied to occupied), which train moved in?  The one from
    A, or the one from C?
    <P>
    Some of this ambiguity can be removed by careful arrangement of the detection
    blocks, by accepting limitations on how trains can run (or how
    short blocks have to be), and by using more intelligent logic that 
    thinks about the direction and priority of trains.  But it's clear that
    even straight track poses some problems.
    
    <P>
    Turnouts add an additional layer of complexity.  
    Imagine a train
    is siting in the block next to the normal (closed) route, and another
    is siting in the reversed (thrown) route. 
    When the occupancy sensor for the turnout goes active, which train
    has entered the turnout track?  That depends on which way the
    turnout is set, so the program needs to be able to 
    consider that information too.
    
    <h3>
    Tools
    </h3>
    
    JMRI provides a "Block" class to handle the tracking. 
    
    <P>
    Note that this was first available in JMRI 1.7.5, and not
    all features are completely present.  For example, you cannot
    store block objects in a configuration file; they must be manually
    created in your scripts.  This limitations will be removed with time.
    
    <P>
    
    
<!--#include virtual="/Footer" -->
</body>
</html>
