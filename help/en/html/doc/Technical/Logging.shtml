<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: How to Use the Logging Facilities
    </TITLE>
   <meta name="Author" content="Bob Jacobsen">
    <meta name="keywords" content="JMRI log4j logging log">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

	    <!-- ------------- -->
	    <!-- Page Contents --> <!-- Required -->
	    <!-- ------------- -->

	    <H1>JMRI: How to Use the Logging Facilities</H1>


This page provides a little information on how 
JMRI logs error, status and debugging information.

<P>
For other details on JMRI internals, please see the
<A HREF="../Technical/index.shtml" NAME="technical pages">technical pages</A>.

<P>
JMRI uses the Jakarta
<A HREF="http://jakarta.apache.org/log4j/docs/index.html">Log4J</a>
package to handle logging during program operation.
<P>
Log4J provides several levels of messages:
<UL>
<LI>Error
<LI>Warning
<LI>Info - summary information during normal operation
<LI>Debug - information on the internal operation of the program.  
There is a lot of this, and turning it all on can slow the 
program down significantly.
</UL>
<P>
By convention, JMRI applications will attempt to initialize
Log4J using a "default.lcf" file.  The JMRI distributions
contain a version of this file with
extensive comments. (This file needs to be in the "Program Directory",
which can be found by selecting the "Locations" item in the main help menu)

<P>
If you change the line:
<PRE>
 log4j.rootCategory=DEBUG, A1
</PRE>
to 
<PRE>
 log4j.rootCategory=DEBUG, A1, R
</PRE>
log entries will be written to both the "console"
by "A1", and a file by "R". 
<P>
The "default.lcf" file determines the destination and format
of the logged messages.  By default, you get lines that look like:

<CODE><PRE>
514668 [AWT-EventQueue-0] WARN jmri.jmrit.powerpanel.PowerPane  - No power manager instance found, panel not active
</PRE></CODE>
The columns are:
<ul>
<li><CODE>514668 - time in milliseconds since the program started</CODE>
<li><CODE>[AWT-EventQueue-0] - the thread that emitted the message, useful if you've created your own in a script</CODE>
<li><CODE>WARN - the severity of the message</CODE>
<li><CODE>jmri.jmrit.powerpanel.PowerPane - the place in the code (class name) that emitted the message</CODE>
<li><CODE>No power manager instance found, panel not active - the message itself</CODE>
</UL>

<P>
To log messages
from a class named MyClass, add this to the bottom of the class file:
<code>
<PRE>
	static org.apache.log4j.Category log 
	        = org.apache.log4j.Category.getInstance(MyClass.class.getName());
</PRE>
</code>
Then for each message to log insert a line like:

<code>
<PRE>
	log.debug("message");
</PRE>
</code>

<P>
If the message is not just an explicit string, you should use
this form instead:
<code>
<PRE>
	if (log.isDebugEnabled()) log.debug("Found "+numberEntrie());
</PRE>
</code>
so the program doesn't waste time forming the message string (in this
case, calling numberEntries() and concatenating the strings) if
the log.debug call isn't going to store it anyway.

<h3>Logging Levels</h3>
<table border="1">
<tr><th>Level</th><th>Code Fragment</th><th>Use</th></tr>
<tr><td>DEBUG</td><td>if (log.isDebugEnabled()) log.debug(..)</td><td>Detailed messages, only used in debugging</td></tr>
<tr><td>INFO</td><td>if (log.isInfoEnabled())log.info(..)</td><td>Routine messages you want to see in normal operation</td></tr>
<tr><td>WARN</td><td>log.warn(..)</td><td>The program is still operating, sort of, but something here needs to be looked at</td></tr>
<tr><td>ERROR</td><td>log.error(..)</td><td>Indicates the desired operation is not going to happen, and explains why</td></tr>
<tr><td>FATAL</td><td>log.fatal(..)</td><td>Rarely used, these are the last things the program says before shutting down unexpectedly</td></tr>
</table>

<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

