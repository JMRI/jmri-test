<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
<head>
<!-- Copyright ($Author: jacobsen $) 2009 -->
<!-- $Id: MultiConnectionUpdate.shtml,v 1.1 2010-03-11 05:42:58 jacobsen Exp $ -->
<title>JMRI: Multi-connection Update</title>

<!-- Style -->
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
<link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
<link rel="icon" href="/images/jmri.ico" TYPE="image/png">
<link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
<!--#include virtual="/Header" -->

<!--#include virtual="Sidebar" -->
<div id="mainContent">

<h1> 
JMRI: Multi-connection Update
</h1>

This page is a list of hints for adapting systems
(jmri.jmrix subdirectories) to the new multi-system format.
It's clearly a work in progress!

<p>
Basically, you have to get all the static variables
and instance() methods out of the code. In their place, 
you put references to methods of a specific
SystemConnectionMemo object that carries the references that
used to be static.

<p>
At the same time, we're doing the Swing pattern update, and
a couple other minor cleanups on the code.


<h2>In primary system directory </h2>

Create a specific subclass of SystemConnectionMemo.
This will eventually do all the manager initialization, and
carry any object references that used to be through instance
variables.

<p>
Add all that stuff.


<h2>For each connection method (e.g. each subdirectory)</h2>

<p>
Edit the ConnectionConfig class to take
and record a reference to a SerialPortAdapter object,
and to return it from the getAdapter() method.
Also, remove the instance() method and its 
implementation.
<code><pre>
    protected void setInstance() { 
        if (adapter == null) {
            adapter = new PR3Adapter();
        }
    }
</pre></code>

<p>
Edit the adapter class (e.g. PR3Adapter) to remove
the instance() method and its implementation.

<p>
The configurexml/ConnectionConfigXml class 
needs to have a method added:
<code><pre>
    protected void getInstance(Object object) {
        adapter = ((ConnectionConfig)object).getAdapter();
    }
</pre></code>
We should probably refactor this later, but this
is the current form to make sure the correct
ConnectionConfig class is used.
We're leaving it unchanged for now to 
avoid competition with the 
serial/network refactoring. 

<p>
Also, change this
<code><pre>
    protected void getInstance() {
        adapter = new LnHexFilePort();
    }
</pre></code>
to this
<code><pre>
    protected void getInstance() {
        adapter = LnHexFilePort.instance();
    }
</pre></code>



<h2>Menu</h2>

Create a swing subdirectory, if it doesn't exist already.
<p>
Put the code for making the menu there, if need
be leaving a migration subclass behind. (c.f.
jmri.jmrix.loconet.LocoNetMenu and jmri.jmrix.loconet.swing.LocoNetMenu
for a template)

<p>
Create a ComponentFactory factory class in the
swing subpackage that can e.g. create the menu, 
and eventually the trees, etc.

<p>
Edit jmri.jmrix.ActiveSystemsMenu to remove 
the class; menu creation is automatic from now on.

(Every time you create and register a *SystemConnectionMemo,
you also register the ComponentFactory)





<!--#include virtual="/Footer" -->
</body>
</html>
