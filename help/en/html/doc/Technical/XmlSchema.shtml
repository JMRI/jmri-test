<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: XmlSchema.shtml,v 1.4 2010-01-04 21:51:59 jacobsen Exp $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Xml Schema Usage
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code xml schema usage">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

<H1>JMRI: XML Schema Usage</H1>

JMRI uses XML for a number of purposes: 
to hold decoder definitions, for its
<a href="XmlPersistance.shtml">persistance system</a>
for configuration and panel information,
and to create parts of the web site from other files.
This page describes how we specify the 
content of those files using 
<a href="">XML schema</a>.

<h2>Access to Schema Definitions</h2>
JMRI uses XML Schema to define the format of its files.
<P>
Those XML Schema  need to be available to the program when it
reads the files, as they define the default values of missing
attributes and other needed information.
<P>
In the JMRI distributions, these are stored in the 
<a href="/xml/schema">xml/schema</a> 
directory.  
Note that they are not stored in each directory
alongside the XML files. There are just too many 
locations to keep such a set of schema definition files up to date.
JMRI itself, via the jmri.jmrit.XmlFile class, provides
support for locating those files when the XML parser
needs them.  
<p/>

<h2>Checking JMRI Schema</h2>


XML Schema are more verbose than the DTDs we're used to.
With that complexity, we get more expressing power, but
at the same time more ways to mess up.
<p>
It's important that the JMRI schema definitions be kept semantically
correct.  There are some subtle aspects to XML schema that it will take
us some time to get comfortable with, and if we let too many problems
build up in the meantime, we'll eventually have a lot of back-fitting to do.
The W3C online 
<a href="http://www.w3.org/2001/03/webdata/xsv">schema validation tool</a>
is a very good tool for checking that JMRI schema changes are still technically 
correct.  You should check your changes with it before commiting them to CVS.
Unfortunately, it doesn't seem to to check compliance with nested schema elements,
e.g. from DocBook (see below) or JMRIschema,
but it's still a very useful check.

<p>
Using the JMRI "Validate XML File" tool in the "Debug" menu to
validate a .xml file ("instance file") that uses your new or 
updated schema is an important check of both.

<p>
You should also add a 
<a href="JUnit.shtml">JUnit test</a>
that checks the schema and a typical file.
The easiest way to do that (see e.g.
test/jmri/configurexml/SchemaTest.java
for an example) is to inherit your test class
from jmri.configurexml.LoadFileTestBase, and 
then call <code>validate(File f)</code>
on a test file.  The test XML file can put put with
the test Java file in the "test/" file tree.
<code><pre>
    public void testValidateRoster() {
        validate(new java.io.File("java/test/jmri/configurexml/RosterSchemaTest.xml"));
    }
</pre></code>

<p>
For a quick file check, Linux and MacOS X users can validate from the
command line with e.g. 
<code><pre>
 cd xml
 xmllint -schema schema/aspecttable.xsd -noout signals/sample-aspects.xml
</pre></code>
<code>xmllint</code> can't check schema files themselves, unfortunately, because
their schema isn't something it can handle.

<p>
Your schema docs should point to our standard stylesheet in 
their head matter:
<code><pre>
&lt;?xml-stylesheet href="schema2xhtml.xsl" type="text/xsl"?&gt;
</pre></code>
This is a pretty basic stylesheet, only really sufficient to
show basic structure.  For an example of the output it
produces, click on this link to the 
<a href="http://jmri.org/xml/schema/aspecttable.xsd">aspecttable.xsd</a> schema file.
If anybody knows of a better stylesheet, we
can certainly switch to it.

<h2>Developing JMRI Schema</h2>


<h3>The Venetian Blind Pattern</h3>

http://www.ibm.com/developerworks/xml/library/ws-soa-xmlwsdl.html#N1012B

But check out this one:
http://developers.sun.com/jsenterprise/archive/nb_enterprise_pack/reference/techart/design_patterns.html
http://www.javapassion.com/webservices/XMLSchemaDesignPatterns.pdf

<p>
Our approach is based on the structure of the underlying code:
A particular *Xml class is the unit of reuse.

<p>
Overall structure of the schema; planning for inclusion, merging and reuse; 
planning for extension.

Lots of classes descend from jmri.configurexml.XmAdapter:
<a href="http://jmri.org/JavaDoc/doc/jmri/configurexml/XmlAdapter.html">see JavaDoc</a>

By convention, provide &lt;xsd:annotation&gt;&lt;xsd:appinfo&gt; element containing
the class name that reads/writes and element:
<pre><code>
    &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
        Some human readable docs go here
        &lt;/xs:documentation&gt;
        &lt;xs:appinfo&gt;
            &lt;jmri:usingclass configurexml="false"&gt;jmri.managers.DefaultSignalSystemManager&lt;/jmri:usingclass&gt;
        &lt;/xs:appinfo&gt;
    &lt;/xs:annotation&gt;
</code></pre>

<h2>External Standards and Future Work</h2>

The 
<a href="http://www.oasis-open.org/">OASIS collaboration</a>
defines a number of schema and schema elements that have become 
well-known standards. Were possible, we should use those 
<a href="http://www.oasis-open.org/specs/index.php">standard elements</a>
to improve inter-operability. Perhaps the first ones of interest are:
<ul>
<li><a href="http://docbook.org/">DockBook</a> defines elements for several concepts we use:
    <ul>
    <li>author (http://www.docbook.org/tdg/en/html/author.html)
    <li>address (http://www.docbook.org/tdg/en/html/address.html)
    <li>revision history (http://www.docbook.org/tdg/en/html/revhistory.html)
    </ul>

http://www.docbook.org/specs/docbook-5.0-spec-cs-01.html
http://www.docbook.org/xml/5.0/xsd/
http://www.docbook.org/xml/5.0/xsd/docbook.xsd

We have our own subset that we use, because 
the full DocBook 5.0 schema takes a very long time to parse, 
and isn't fully consistent with versions of other software that we use.
We use the normal DocBook 5.0 namespace, so we can later easily convert to 
a more complete schema transparently.
Our smaller schema is located at
<a href="http://jmri.org/xml/schema/docbook/DocBook.xsd">http://jmri.org/xml/schema/docbook/DocBook.xsd</a>
(our usual schema location). It is <em>only</em>
referenced from JMRI schema files, not instance files,
so that we can later convert with finite work.

<li><a href="http://www.oasis-open.org/committees/ubl/faq.php">UBL</a>, 
though aimed at business 
transactions, defines elements to represent parties (companies, people), 
devices, model numbers, etc.
<li><a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=office">OpenDocument</a> 
(OODF) defines a set of elements and structures for 
computations as part of its spreadsheet module. (But they provide Relax-NG schema, not W3C XML Schema,
so that doesn't help so much)
</ul>

Learning to use these will require some work, as 
we can't assume that computers using JMRI have internet access,
so can't just reference the entire schema as remote entities.

<h2>Copyright, Author and Revision Information</h2>

For various reasons, we need to move to DocBook format
for Copyright, Author and Revision information in our XML
files (instance files).

<p>
Sample XML:
<code><pre>
  &lt;db:copyright&gt;
        &lt;db:year&gt;2009&lt;/db:year&gt;
        &lt;db:year&gt;2010&lt;/db:year&gt;&lt;
        db:holder&gt;JMRI&lt;/db:holder&gt;&lt;/db:copyright&gt;

  &lt;db:authorgroup&gt;
    &lt;db:author&gt;
        &lt;db:personname&gt;&lt;db:firstname&gt;Sample&lt;/db:firstname&gt;&lt;db:surname&gt;Name&lt;/db:surname&gt;&lt;/db:personname&gt;
        &lt;db:email&gt;name@com.domain&lt;/db:email&gt;
    &lt;/db:author&gt;    
  &lt;/db:authorgroup&gt;

  &lt;db:revhistory&gt;
    &lt;db:revision&gt;
        &lt;db:revnumber&gt;1&lt;/db:revnumber&gt;
        &lt;db:date&gt;2009-12-28&lt;/db:date&gt;
        &lt;db:authorinitials&gt;initials&lt;/db:authorinitials&gt;
    &lt;/db:revision&gt;    
  &lt;/db:revhistory&gt;
</pre></code>

<p>
Sample schema description:
<code><pre>
    &lt;xs:element ref="docbook:copyright" minOccurs="1" maxOccurs="1" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) providing copyright information in standard form.
      Must be present.
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;

    &lt;xs:element ref="docbook:authorgroup" minOccurs="1" maxOccurs="unbounded" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) describing the authors in standard form
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;

    &lt;xs:element ref="docbook:revhistory" minOccurs="1" maxOccurs="unbounded" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) describing the revision history in standard form
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;
</pre></code>


<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

