<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Xml Schema Usage
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code xml schema usage">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

<H1>JMRI: XML Schema Usage</H1>

JMRI uses XML for a number of purposes: 
to hold decoder definitions, for its
<a href="XmlPersistance.shtml">persistance system</a>
for configuration and panel information,
and to create parts of the web site from other files.
This page describes how we specify the 
content of those files using 
<a href="http://www.w3schools.com/schema/schema_intro.asp">XML schema</a>.

<p>
For examples (not a tutorial!) on the structure of 
our schema, see the 
<a href="XmlSchemaExamples.shtml">examples page</a>.

<p>
The current schema can be seen online in the 
<a href="http://jmri.org/xml/schema">schema directory</a>.
The most commonly used one is the 
<a href="http://jmri.org/xml/schema/layout.xsd">layout.xsd schema for panel files</a>.  
See below on how it's organized.

<h2>Access to Schema Definitions</h2>
JMRI uses XML Schema to define the format of its files.
<P>
Those XML Schema may need to be available to the program when it
reads the files, as they define the default values of missing
attributes and other needed information.
<P>
In the JMRI distributions, these are stored in the 
<a href="/xml/schema">xml/schema</a> 
directory.  
Note that they are not stored in each directory
alongside the XML files. There are just too many 
locations to keep such a set of schema definition files up to date.
JMRI itself, via the jmri.jmrit.XmlFile class, provides
support for locating those files when the XML parser
needs them.  
<p/>

<h2>Developing JMRI Schema</h2>

Our preferred organization for XML schema
is based on the structure of the underlying code:
A particular *Xml class is the unit of reuse.

<p>
Lots of classes descend from jmri.configurexml.XmAdapter:
(<a href="http://jmri.org/JavaDoc/doc/jmri/configurexml/XmlAdapter.html">see JavaDoc</a>)

<p>
By convention, provide &lt;xsd:annotation&gt;&lt;xsd:appinfo&gt; element containing
the class name that reads/writes the element:
<pre><code>
    &lt;xs:annotation&gt;
        &lt;xs:documentation&gt;
        Some human readable docs go here
        &lt;/xs:documentation&gt;
        &lt;xs:appinfo&gt;
            &lt;jmri:usingclass configurexml="false"&gt;jmri.managers.DefaultSignalSystemManager&lt;/jmri:usingclass&gt;
        &lt;/xs:appinfo&gt;
    &lt;/xs:annotation&gt;
</code></pre>

<h3>The Venetian Blind Pattern</h3>

We are moving toward structuring our XML using the "Venetian Blind pattern".
In this style, the top level elements that are written by classes have types defined for them.
Any elements that are within those are defined anonymously, within those elements.
For an example of this, see the 
<a href="http://jmri.org/xml/schema/types/sensors.xsd">types/sensors.xsd</a> file,
which defines a type for the "sensors" element written for SensorManagers.
Within that, there is included a definition of a "Sensor" element, and a "comment"
element within that.

<p>
This limits the number of types, and keeps the schema files roughly aligned with
the classes that do the reading and writing.

<p>
There are a few items (elements and attribute groups) that extend across multiple types.
They are defined in the 
<a href="http://jmri.org/xml/schema/types/general.xsd">types/general.xsd</a> file.


<p>
More information on XML schema design patterns is available at
<a href="http://www.ibm.com/developerworks/xml/library/ws-soa-xmlwsdl.html#N1012B">DeveloperWorks</a>.
<a href="http://developers.sun.com/jsenterprise/archive/nb_enterprise_pack/reference/techart/design_patterns.html">developers.sun</a>, and
<a href="http://www.javapassion.com/webservices/XMLSchemaDesignPatterns.pdf">javapassion</a>.

<h3>Available Defined Types</h3>

<dl>
<dt>systemNameType<dd>System names, to eventually be tightened up to a real test of validity
<dt>userNameType<dd>User names, not including the empty name
<dt>nullUserNameType<dd>User names, with an empty value allowed
<dt>beanNameType<dd>Either user or system name
<dt>turnoutStateType<dd>closed, thrown
<dt>signalColorType<dd>red, yellow, etc
<dt>yesNoType<dd>yes, no
<dt>trueFalseType<dd>true, false
</dl>

<h3>Schema Versioning</h3>

The requirements for versioning of XML Schema are much
simpler than those for DTDs, mostly because individual
items have much clearer scope.  

<ul>
<li>
You <em>do not</em> need
to version the schema if you add or change things such that
existing files will continue to validate.
<p>
In that case, just make your schema changes in the current
schema document, and commit them back to SVN.
<li>You <em>do</em> need to
version a schema you make a change to 
the schema such that previous files will no longer validate
with the current schema.  
<p>
In this case, the steps to version the schema are:
    <ol>
    <li>Copy the current schema file to a new one with 
        the <em>next</em> version number.  E.g. 
        copy types/turnouts-2-9-6.xsd to types/turnouts-2-9-8.xsd.
        Make your changes and commit that new version.
    <li>If this is a subfile, such as the types/turnouts-2-9-6.xsd,
        that is included in a main schema such as layout-2-9-6.xsd,
        that main file also needs to be copied, have the include
        changed, and commited to SVN. 
        Now you've got 
        a new layout-2-9-8.xsd schema for output files to reference.
    <li>Then, change the Java code that writes the 
        schema reference to the top of output files 
        to use the new filename. For example, layout (panel)
        files are written by 
        <code>src/jmri/configurexml/ConfigXmlManager.java</code>.
        Look for the 
        <br/><code>static final public String schemaVersion = "-2-9-6"</code><br/>
        line and change it to your new version number suffix.
    <li>If there's an associated
        XML stylesheet(s), its name has to be changed in a coordinated way,
        including the 
        code change where the stylesheet reference is included.
    </ol>
</ul>

In either case, it's important to include sufficient
test files that the unit tests catch any problems with the new
and old schema.  See the 
<a href="#test">test section below</a>.

<h2>Checking JMRI Schema</h2>

XML Schema are more verbose than the DTDs we're used to.
With that complexity, we get more expressing power, but
at the same time more ways to mess up.
<p>
It's important that the JMRI schema definitions be kept semantically
correct.  There are some subtle aspects to XML schema that it will take
us some time to get comfortable with, and if we let too many problems
build up in the meantime, we'll eventually have a lot of back-fitting to do.
The W3C online 
<a href="http://www.w3.org/2001/03/webdata/xsv">schema validation tool</a>
is a very good tool for checking that JMRI schema changes are still technically 
correct.  You should check your changes with it before commiting them to CVS.
Unfortunately, it doesn't seem to to check compliance with nested schema elements,
e.g. from DocBook (see below) or JMRIschema,
but it's still a very useful check.

<p>
Using the JMRI "Validate XML File" tool in the "Debug" menu to
validate a .xml file ("instance file") that uses your new or 
updated schema is an important check of both. 

<p>
You should also add a 
<a href="JUnit.shtml">JUnit test</a>
that checks the schema and a typical file.
The easiest way to do that (see e.g.
test/jmri/configurexml/SchemaTest.java
for an example) is to inherit your test class
from jmri.configurexml.LoadFileTestBase, and 
then call <code>validate(File f)</code>
on a test file.  The test XML file can put put with
the test Java file in the "test/" file tree.
<code><pre>
    public void testValidateRoster() {
        validate(new java.io.File("java/test/jmri/configurexml/RosterSchemaTest.xml"));
    }
</pre></code>

<p>
For a quick file check, Linux and Mac OS X users can validate from the
command line with e.g. 
<code><pre>
 cd xml
 xmllint -schema schema/aspecttable.xsd -noout signals/sample-aspects.xml
</pre></code>
<code>xmllint</code> can't check schema files themselves, unfortunately, because
their schema isn't something it can handle.

<p>
Your schema docs should point to our standard stylesheet in 
their head matter:
<code><pre>
&lt;?xml-stylesheet href="schema2xhtml.xsl" type="text/xsl"?&gt;
</pre></code>
This is a pretty basic stylesheet, only really sufficient to
show basic structure.  For an example of the output it
produces, click on this link to the 
<a href="http://jmri.org/xml/schema/aspecttable.xsd">aspecttable.xsd</a> schema file.
If anybody knows of a better stylesheet, we
can certainly switch to it.

<a id="test">
<h3>JUnit testing</h3>

We test XML schema and files two ways: 
Do they properly validate, and can certain files be properly read in and then written
back.  The second test is more complicated, of course, but also more valuable.

<p>
To test for validation, drop an XML file into the 
<code>test/jmri/configurexml/files</code> directory.
This will automatically be tested to make sure it validates.
If you version a schema, you should 
run a few of these files through PanelPro (e.g. read them
and then rewrite them with the new format) and include new
copies to test the new format.
<p>
Small fragments that demonstrate specific schema features
can be put in the 
<code>test/jmri/configurexml/pass</code>
and
<code>test/jmri/configurexml/fail</code>
directories (the "fail" directory files are expected to fail
for some specific reason documented via comments in the file).

<p>
To read and write, see the example in
<code>test/jmri/configurexml/LoadFileTest.java</code>

<h2>External Standards and Future Work</h2>

The 
<a href="http://www.oasis-open.org/">OASIS collaboration</a>
defines a number of schema and schema elements that have become 
well-known standards. Were possible, we should use those 
<a href="http://www.oasis-open.org/specs/index.php">standard elements</a>
to improve inter-operability. The first ones of interest are:
<ul>
<li><a href="http://docbook.org/">DockBook</a> defines elements for several concepts we use:
    <ul>
    <li>author (http://www.docbook.org/tdg/en/html/author.html)
    <li>address (http://www.docbook.org/tdg/en/html/address.html)
    <li>revision history (http://www.docbook.org/tdg/en/html/revhistory.html)
    </ul>

See
<ul>
<li><a href="http://www.docbook.org/specs/docbook-5.0-spec-cs-01.html">http://www.docbook.org/specs/docbook-5.0-spec-cs-01.html</a>
<li><a href="http://www.docbook.org/xml/5.0/xsd/">http://www.docbook.org/xml/5.0/xsd/</a>
<li><a href="http://www.docbook.org/xml/5.0/xsd/docbook.xsd">http://www.docbook.org/xml/5.0/xsd/docbook.xsd</a>
</ul>
<p>
We have our own DocBook subset that we use, because 
the full DocBook 5.0 schema takes a very long time to parse, 
and isn't fully consistent with versions of other software that we use.
We use the normal DocBook 5.0 namespace, so we can later easily convert to 
a more complete schema transparently.
Our smaller schema is located at
<a href="http://jmri.org/xml/schema/docbook/DocBook.xsd">http://jmri.org/xml/schema/docbook/DocBook.xsd</a>
(our usual schema location). It is <em>only</em>
referenced from JMRI schema files, not instance files,
so that we can later convert with finite work.

<li><a href="http://www.oasis-open.org/committees/ubl/faq.php">UBL</a>, 
though aimed at business 
transactions, defines elements to represent parties (companies, people), 
devices, model numbers, etc.

<li><a href="http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=office">OpenDocument</a> 
(OODF) defines a set of elements and structures for 
computations as part of its spreadsheet module. (But they provide Relax-NG schema, not W3C XML Schema,
so that doesn't help so much)
</ul>

Learning to use these will require some work, as 
we can't assume that computers using JMRI have internet access,
so can't just reference the entire schema as remote entities.

<h2>Copyright, Author and Revision Information</h2>

For various reasons, we need to move to DocBook format
for Copyright, Author and Revision information in our XML
files (instance files).

<p>
Sample XML:
<code><pre>
  &lt;db:copyright&gt;
        &lt;db:year&gt;2009&lt;/db:year&gt;
        &lt;db:year&gt;2010&lt;/db:year&gt;&lt;
        db:holder&gt;JMRI&lt;/db:holder&gt;&lt;/db:copyright&gt;

  &lt;db:authorgroup&gt;
    &lt;db:author&gt;
        &lt;db:personname&gt;&lt;db:firstname&gt;Sample&lt;/db:firstname&gt;&lt;db:surname&gt;Name&lt;/db:surname&gt;&lt;/db:personname&gt;
        &lt;db:email&gt;name@com.domain&lt;/db:email&gt;
    &lt;/db:author&gt;    
  &lt;/db:authorgroup&gt;

  &lt;db:revhistory&gt;
    &lt;db:revision&gt;
        &lt;db:revnumber&gt;1&lt;/db:revnumber&gt;
        &lt;db:date&gt;2009-12-28&lt;/db:date&gt;
        &lt;db:authorinitials&gt;initials&lt;/db:authorinitials&gt;
    &lt;/db:revision&gt;    
  &lt;/db:revhistory&gt;
</pre></code>

<p>
Sample schema description: (But see the real one, which is provided in schema/docbook)
<code><pre>
    &lt;xs:element ref="docbook:copyright" minOccurs="1" maxOccurs="1" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) providing copyright information in standard form.
      Must be present.
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;

    &lt;xs:element ref="docbook:authorgroup" minOccurs="1" maxOccurs="unbounded" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) describing the authors in standard form
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;

    &lt;xs:element ref="docbook:revhistory" minOccurs="1" maxOccurs="unbounded" &gt;
      &lt;xs:annotation&gt;&lt;xs:documentation&gt;
      DocBook element(s) describing the revision history in standard form
      &lt;/xs:documentation&gt;&lt;/xs:annotation&gt;
    &lt;/xs:element&gt;
</pre></code>


<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

