<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Unit testing with JUnit
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code ">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

<div id="mainContent">

<H1>JMRI: Unit testing with JUnit</H1>

JUnit is a system for building "unit tests" of software.  
Unit tests are small tests that make sure that individual
parts of the software do what they're supposed to do.
In a distributed project like JMRI, where there are lots
of developers in only loose communication with each other,
unit tests are a good way to make sure that the code hasn't 
been broken by a change.
<P>
For more information on JUnit, see
<A HREF="http://www.junit.org">the JUnit home page</A>.
A very interesting example of test-based development is available from 
<A HREF="http://www.objectmentor.com/publications/xpepisode.htm">Robert Martin</a>'s book.
<P>
Some of the classes have JUnit tests available. It's good
to add JUnit tests as you make changes (test your new functionality
to make sure that it is working, and keeps working),
when you have to figure out what somebodys code does
(the test documents exactly what should happen!),
and when you track down a bug (make sure it doesn't come back).

<a name="run">
<h2>Running the Tests</h2></a>

To run the existing tests, say
<CODE>
<PRE>
   ant alltest
</PRE>
</CODE>
This will compile the test code, which lives in the "test"
subdirectory of the "java" directory in our usual code distributions,
and then run the tests under a GUI.  
(To make sure you've recompiled everything, you 
may want to do <code>ant clean</code> first)
If you know the name
of your test class, or the test class for your package, you 
can run that directly with the "runtest" script:
<CODE>
<PRE>
   ant tests
   ./runtest.csh jmri.jmrit.powerpanel.PowerPanelTest
</PRE>
</CODE>
The first line compiles all the test code, and the second
runs a specific test or test suite.

<a name="nightly">
<h2>Nightly Builds</h2></a>

Every night about 1:45AM Pacific time
(and sometimes more often), 
the "nightlybuild.csh" script from a 
normal checkout is run.  This

<OL>
<LI>updates from the developer CVS
<LI>cleans out any existing compilations, etc
<LI>rebuilds from scratch with the debug target
<LI>runs the jmri.HeadLessTest app, which in turn runs the JUnit tests.
</ol>
<P>
If any of these steps fail, including logging any warning or error messages, 
the log is emailed to the "jmri-builds" list at SourceForge.  
You can 
<A HREF="https://lists.sourceforge.net/lists/listinfo/jmri-builds">subscribe to this list</a>
to get the bad news as quickly as possible, or 
<A HREF="http://sourceforge.net/mailarchive/forum.php?forum_name=jmri-builds">view the archives</a>
to see past logs.

<P>
(When the build succeeds, nothing is mailed, to cut down on traffic)

<a name="write">
<h2>Writing Tests</h2></a>

By convention, we have a "test" class shadowing 
(almost) every real class.  
The "test" directory contains a tree of package
directories parallel to the "src" tree.
Each test class has the same name
as the class to be tested, except with "Test" appended, and
will appear in the "test" source tree. 
For example, 
the "jmri.Version" class's source code is in "src/jmri/Version.java", 
and it's test class is "jmri.VersionTest" found in "test/jmri/VersionTest.java".

<P>
There are additional classes which are used to 
group the test classes for a particular package
into JUnit test suites.

<h3>Writing Additional Tests for an Existing Class</h3>

To write additional tests for a class with existing tests,
first locate the test class. (If one doesn't exist, see the 
section below about writing tests for a new class)
<P>
To that test class, add one or more test methods using the 
JUnit conventions.  Basically, each method needs a name that starts with 
"test", e.g. "testFirst", and has to have a "public void" signature.
JUnit will handle everything after that.
<P>
In general, test methods should be small, testing just one piece of the 
classes operation.  That's why they're called "unit" tests.

<h3>Writing Tests for a New Class</h3>

(Needs info here: basically, copy some other package, and
don't forget to put an entry in the enclosing package's test suite)

<h3>Writing Tests for a New Package</h3>

(Needs info here: basically, copy some other package, and
don't forget to put an entry in the enclosing package's test suite)

<h3>Key Metaphors</h3>

<h4>Handling Log4J Output From Tests</h4>

JMRI uses 
<A HREF="http://logging.apache.org/log4j/docs/index.html">Log4j</a>
to 
<A HREF=""Logging.shtml">handle logging of various conditions</a>, 
including error messages and 
debugging information. Tests are intended to run without error or warning
output, so that it's immediately apparent from an empty standard log that
they ran cleanly.
<P>
Log4j usage in the test classes themselves has two aspects:
<OL>
<LI>It's perfectly OK to use log.debug(...) statements to make it
easy to debug problems in test statements.  log.info(...) can be used
sparingly to indicate normal progress, because it's normally turned off when 
running the tests.
<LI>In general, log.warn or log.error should only be used when the test 
then goes on to trigger a JUnit assertion or exception, because the fact that
an error is being logged does not show up directly in the JUnit summary of results.
</OL>
<p>
On the other hand, you might want to deliberately provoke errors in the
code being tested to make sure that the conditions are being handled properly.
This will often produce log.error(...) or log.warn(...) messages, which must 
be intercepted and checked.
<P>
To allow this, JMRI runs it's using tests with a special log4j appender, which
stores messages so that the JUnit tests can look at them before they are forwarded
to the log.  There are two aspects to making this work:
<OL>
<LI>All the test classes should include common code in their setup()
and teardown() code to ensure that log4j is properly initiated, and that
the custom appender is told when a test is beginning and ending.
<CODE><PRE>
    // The minimal setup for log4J
    protected void setUp() throws Exception { 
        apps.tests.Log4JFixture.setUp(); 
        super.setUp();
    }
    protected void tearDown() throws Exception { 
        super.tearDown();
        apps.tests.Log4JFixture.tearDown(); 
    }
</PRE></code>
<LI>When a test is deliberately invoking a message, it should then
use the check to see that the message was created.  
For example, if the class under test is expected to do
<BR><CODE><PRE>
    log.warn("Provoked message");
</PRE></CODE>
the invoking test case should follow that with the line:
<BR><CODE><PRE>
    JUnitAppender.assertWarnMessage("Provoked message");
</PRE></CODE>
<P>
It will be a JUnit error if a log.warn(...) or log.error(...) message is
produced that isn't matched to a JUnitAppender.assertWarnMessage(...) call.
</OL>

<h4>Resetting the InstanceManager</h4>

If you are testing code that is going to reference the InstanceManager, 
you should
clear and reset it to ensure you get reproducible results.
<p>
Your <code>setUp()</code> implementation should start with:
<code><pre>
    super.setUp();
    jmri.util.JUnitUtil.resetInstanceManager();
    jmri.util.JUnitUtil.initInternalTurnoutManager();
    jmri.util.JUnitUtil.initInternalLightManager();
    jmri.util.JUnitUtil.initInternalSensorManager();
</pre></code>
(You can omit the initialization managers you don't need)
<p>
Your <code>tearDown()</code> should end with:
<code><pre>
    jmri.util.JUnitUtil.resetInstanceManager();
    super.tearDown();
</pre></code>

<h4>Running Listeners</h4>

JMRI is a multi-threaded application. Listeners for
JMRI objects are notified on various threads.
Sometimes you have to wait for that to take place.
To do that, after you invoke a something that will notifylisteners, 
but before you check the results, 
do
<code><pre>
    JUnitUtil.releaseThread(this);
</pre></code>
This uses a nominal delay, suitable for almost all uses.
If you're doing a lot of notifications, or some complex
calculation in the listeners, you can instead do
<code><pre>
    JUnitUtil.releaseThread(this, 200);
</pre></code>
where the argument is the number of extra milliseconds to let other threads work.
Don't make this longer than really needed, though, because
you colleagues will have to wait that long every time they run the tests.
<p>
Note that this should <b>not</b> be used to synchronize with
Swing threads.  See the next section for that.

<h4>Testing Swing Code</h4>

AWT and Swing code runs on a separate thread from JUnit tests.
Once a Swing or AWT object has been displayed (via
<code>show()</code> or <code>setVisible(true)</code>),
it cannot be reliably accessed from the JUnit thread.  Even using
the listener delay technique described above isn't reliable.

<p>
For the simplest possible test, displaying a window 
for manual interaction, it's OK to create and invoke a Swing
object from a JUnit test.  Just don't try to interact with it once
it's been displayed!

<p>
Because we run tests in "headless" mode during the
<a href="ContinousIntegration.shtml">continuous integration builds</a>,
it's important that Swing (and AWT) access in tests
be enclosed within a mode check:
<pre><code>
        if (!System.getProperty("jmri.headlesstest","false").equals("true")) {
            suite.addTest(myTest.suite());
        }
</code></pre>
This will run the myTest suite of tests only when a display is available.

<p>
For many tests, you'll both make testing reliable and improve the structure 
of your code by separating the GUI (Swing) code from the JMRI logic and
communications.  This lets you check the logic code separately, but invoking
those methods and checking the state them update.

<p>
For more complicated GUI testing, we're starting to use
<a href="http://jfcunit.sourceforge.net/">JFCUnit</a>.

<p>
For a very simple example of the use of JFCUnit, see the
<a href="https://sourceforge.net/apps/trac/jmri/browser/trunk/jmri/java/test/jmri/util/SwingTestCaseTest.java">test/jmri/util/SwingTestCaseTest.java</a> file.

<p>
To use JFCUnit, you first inherit your class From
<code>SwingTestCase</code> instead of <code>TestCase</code>.
This is enough to get basic operation of Swing tests; the base class 
pauses the test thread until Swing (actually, the AWT event mechanism)
has completed all processing after every Swing call in the test.
(For this reason, the tests will run much slower if you're e.g. moving the
mouse cursor around while they're running)

<p>
For more complex GUI testing, you can invoke various aspects of the interface
and check internal state using test code.
<h3>Issues</h3>

JUnit uses a custom classloader, which can cause problems finding
singletons and starting Swing.  If you get the error
about not being able to find or load a class, suspect that
adding the missing class to 
the test/junit/runner/excluded.properties file would fix it.
<p>
As a test you can try setting the "-noloading" option in the
<code>main</code> of whichever test class you're having trouble with:
<code><pre>
static public void main(String[] args) {
    String[] testCaseName = {"-noloading", LogixTableActionTest.class.getName()};
    junit.swingui.TestRunner.main(testCaseName);
}
</pre></code>

<p>
The right long-term fix is to have all classes with loader
issues included in the 
<code>test/junit/runner/excluded.properties</code>
file. JUnit uses those properties to decide how to handle loading
and reloading of classes.

<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

