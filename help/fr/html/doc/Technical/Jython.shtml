<!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- $Id: Jython.shtml,v 1.6 2009/12/16 05:28:34 jacobsen Exp $ -->
 <!--Translated by Hervé Blorec le 2011/9/19 -->
<html lang="fr">

<html>
<head>
   <title>Jython access to JMRI tools</title>

    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code CVS FAQ">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=utf-8">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

<h1>Accès de Jython aux outils JMRI</h1>

Cette page parle de l'accès de Jython aux librairies JMRI, Jython est une version Java de Python.. L'accent est mis sur l'utilisation des capacités de JMRI   depuis une ligne de commmande d'un interprêteur Jython. Voir les
<A HREF="../../tools/scripting/index.shtml">pages de script</A> Si vous êtes plus intéresser par les scripts Jython au sein de JMRI.

<h2>Introduction</h2>

<A HREF="http://www.python.org">Python</a> est un langage script couramment utilisé qui est disponible sur de nombreux types d'ordinateurs.  Une version basée Java ,appelée
<A HREF="http://www.jython.org">Jython</a>,
a été intégrée avec JMRI pour rendre la commande d'un réseau de chemin de fer aisée depuis les lignes de commandes de l'ordinateur.

<P>
Pour utiliser la bibliothèque JMRI à partir de Jython, vous devez vous assurer que Jython va rechercher les fichiers jar corrects quand il démarre. Nous fournissons un script "jmrithon" de démarrage qui le fait pour vous.

<PRE>
% ./jmrithon
execFileJython 2.1 on java1.4.1_01 (JIT: null)
(Taper "copyright", "credits" ou "license" pour plus d'informations.

>>> 

</PRE>

Une fois obtenu l'invite Jython ">>>", vous pouvez taper des instructions Python.

<P>
Nous avons fourni quelques fichiers de commandes Python fichiers de configuration pour rendre plus facile le démarrage. 
<P>
Par exemple, vous pouvez démarrer les applications JmriDemo depuis des lignes de commandes Jython, qui est ensuite disponible pour des objets comme les aiguillages et les capteurs:

<pre>
execfile("JmriDemo.py")
     0 JmriDemo.JMRIdemo                     INFO  - programme démarre [principal]
 11109 JmriDemo.JMRIdemo                     INFO  - initialisation principale terminée [principal]

>>> turnouts.newTurnout("LT1", "")
jmri.jmrix.loconet.LnTurnout@1a8f49

>>> turnouts.getTurnout("LT1").getCommandedState()
1

>>> lt1 = turnouts.getTurnout("LT1")

>>> lt1.setCommandedState(CLOSED)

>>> lt1.commandedState
2

>>> lt1.commandedState = CLOSED

>>> lt1.commandedState
4

>>> 
</PRE>

Notez que ceci exécute une version complète de l'application JmriDemo;
toutes les fenêtres et les menus sont présentés de la même façon, la configuration se fait par le panneau de préférences, etc.Ce que la connexion Jython ajoute est une ligne de commande à partir de laquelle vous pouvez manipuler directement les choses.

<BR/>Cela montre aussi certaines des simplifications que Jython et le langage Python apportent à l'utilisation du code JMRI. La fonction de membre de Java:
<PRE>
	turnout.SetCommandedState(jmri.Turnout.CLOSED);
</PRE>
can also be expressed in Jython as:
<PRE>
	turnout.commandedState DÉVIÉ= CLOSED
DIRECT
</PRE>
<BR/>
Ce résultats est dans un code plus facile à lire.
<P>
Il y beaucoup de livres Python utiles ainsi que des tutoriels en ligne.
Pour plus d'informations sur le langage Jython et ces relations avec Java, la meilleure référence est le<A HREF="http://www.oreilly.com/catalog/jythoness/">Jython Essentials</a>
livre publié par O'Reilly. Le 
<A HREF="http://www.jython.org/">site web jython.org </a> est aussi très utile

<H2>Installaton</H2>

Le support Jython nest pas (encore) standard dans JMRI. Pour utiliser ceci:
<OL>
<LI>Vous devez avoir une installation JMRI utilisable. En particulier, démarrez l'application JmriDemo et le configurer pour se connecter à votre matériel de DCC, puis enregistrer, quitter et redémarrer le programme. Assurez-vous que le
connexion fonctionne pour les menus des outils de base avant d'essayer d'utiliser Jython. 
<LI>Télécharger et installer Jython depuis
<A HREF="http://www.jython.org">http://www.jython.org</a>.  
Le développement utilise la version 2.1, donc vous pouvez commencer avec ceci. Sur MacOS X, l'installateur ne s'exécute pas, vous devez donc appeler manuellement le fichier jython_21.class; voir la note MacOS X sur le site web de Jython. Assurez-vous que l'installation est terminée en appelant Jython depuis la ligne de commande:
<PRE>
   % jython
   Jython 2.1 on java1.4.1_01 (JIT: null)
   Taper "copyright", "credits" ou "license" pour plus d'information".
   >>> ^D
</PRE>
Si celui ci travaille, votre installation est OK. Si non, vous devez corriger votre système avant de pouvoir passer à l'étape suivante.
<P>
Si l'installateur ne fonctionne pas, le soutien Jython n'est pas (encore) standard dans JMRI. Pour utiliser ceci:
<OL>
<LI>Vous devez avoir une installation JMRI utilisable. En particulier, démarrez l'application JmriDemo et le configurer pour se connecter à votre matériel de DCC, puis enregistrer, quitter et redémarrer le programme. Assurez - vous que la
connexion fonctionne pour les menus des outils de base avant d'essayer d'utiliser Jython. 
<LI>Télécharger et installer Jython depuis
<A HREF="http://www.jython.org">http://www.jython.org</a>.
Le développement utilise la version 2.1,aussi vous devez télécharger le fichier jython_21.class depuis SourceForge, et entre une commande:
<PRE>
  java -cp . jython_21
</PRE>
puis suivre les invites à travers l'installateur.
<P>
Si l'installateur ne fonctionne pas, mais la commande jython n'est pas trouvée:
<UL>
<LI>Windows: Trouver le fichier jython.bat que l'installateur a créé, et copiez-le dans votre répertoire C: \WINDOWS .
<LI>Linux:  Assurez-vous que le répertoire d'installation de Jython est sur votre chemin.
</UL>
<LI>
Maintenant vous avez juste à avoir les classes nécessaires dans le CLASSPATH utilisé lorsque jython démarre. La liste imposée dans la syntaxe Unix est:
<PRE>
  setenv CLASSPATH .:jmri.jar:lib/log4j.jar:lib/collections.jar:lib/crimson.jar:lib/jdom-jdk11.jar
</PRE>
<BR/>
Pour enregistrer la frappe, le script "jmrithon"  est disponible pour une utilisation sur les systèmes Linux et MacOS X:
<PRE>
  % ./jmrithon
  Jython 2.1 on java1.4.1_01 (JIT: null)
  Taper "copyright", "credits" ou "license" pour plus d'information
  >>> ^D
</PRE>
<BR/>La première fois que vous exécutez, vous aurez un certain nombre de messages sur "les transformation modifiées jar»; ceux-ci peuvent être ignorés, car ils sont normaux.
</OL>

<H2>Utilisation directe de Jython </h2>

Cette section de la page est un tas d'informations utiles sur le contrôle de JMRI depuis Jython directement.
<P>
Notez que vous n'avez pas plus besoin de ceci lors de l'exécution des scripts JmriDemo.py ou similaire, comme ils gèrent le démarrage d'une application complète. 



<h3>Initialisation</h3>

JMRI utilise le système LogJ intensivement pour des informations de journalisation pendant l'exécution du programme. Pour configurer, lors de l'exécution avec Jython, vous devez faire:
<PRE>
  import org
  org.apache.log4j.PropertyConfigurator.configure("default.lcf")
</PRE>
avant de commencer l'une des classes JMRI. Le "default.lcf"
est le nom du fichier de contrôle de l'exploitation pour être utilisé, il peut
être omis.
<P>
Pour rendre les classes JMRI disponible, vous avez à faire: 
<PRE>
  import jmri
</PRE>
Tel qu'il est actuellement mis en place, ceci n'exécute pas n'importe quel code d'initialisation pour commencer les connexions matérielles, etc. Une façon de faire est de charger un fichier de configuration, peut-être celui que vous avez créé précédemment via le panneau de préférences JmriDemo:
<PRE>
  import java.io
  configfile = java.io.File(jmri.jmrit.XmlFile.prefsDir()+"JmriDemoConfig2.xml")
  jmri.InstanceManager.setConfigureManager(jmri.configurexml.ConfigXmlManager())
  jmri.InstanceManager.configureManagerInstance().load(configfile)
</PRE>
pour activer les classes JMRI et vous connecter à votre matériel. JmriDemoConfig2.xml "est le nom du fichier de configuration du programme JmriDemo; vous pouvez utiliser un autre nom si vous le souhaitez.
Le fichier de configuration contrôle la connexion au réseau, et toute autre option qui peut avoir été mise quand il a été créé.

<P>
Alternativement, si vous voulez démarrer l'application JmriDemo complète, y compris la barre de menu, l'écran d'accueil, etc, vous pouvez faire::
<PRE>
 import apps
 apps.JmriDemo.JMRIdemo.main([]) 
</PRE>
<P>
Cela va démarrer le programme, y compris sa configuration de démarrage, etc

<P>
Pour simplifier ce démarrage encore plus, vous pouvez faire:
<PRE>
 execfile("JmriDemo.py")
</PRE>
pour appeler ces commandes . 

<h3>Accès à JMRI</h3>

<PRE>JMRI utilise beaucoup le modèle-usine  pour obtenir l'accès aux objets. En Java il en résulte code verbeux comme

<PRE>
   Turnout t2 = InstanceManager.turnoutManagerInstance().newTurnout("LT2", "turnout 2");
   t2.SetCommandedState(Turnout.THROWN)
</PRE>
Jython simplifie ceci, en nous permettant de fournir des variables utiles, et par le raccourcissement des appels à certaines méthodes.
<P>
Pour avoir accès à des gestionnaires SignalHead, capteur et aiguillage et l'objet CommandStation, les variables de plusieurs raccourcis sont définis dans les scripts .Py énumérés ci-dessus
<UL>
<LI>capteurs
<LI>signaux
<LI>aiguillages
<LI>lumières
<LI>rapports
<LI>mémoires
<LI>dcc
<LI>audio
</UL>
Celles-ci peuvent ensuite être référencées directement dans Jython comme
<PRE>
   t2 = turnouts.provideTurnout("12");
   
   dcc.
</PRE>
Notez que la variable t2 n'a pas besoin d'être déclarée.
<P>
Jython fournit un raccourci pour les paramètres qui ont
été définies avec Java-Bean-like les  méthodes get et set:
<PRE>
   t2.SetCommandedState(Turnout.THROWN)(Dévié)
</PRE>
peuvent être écrit
<PRE>
   t2.commandedState = THROWN(Dévié)

</PRE>
Lorsque l'attribution est en réalité en invoquant la méthode indiquée.
Notez également que THROWN(Dévié)
 a été défini lors de l'exécution du script Python au démarrage; CLOSED(Direct), ACTIVE(Actif, INACTIVE(Inactif), RED, YELLOW et GREENVERT sont
également défini.
<P>
Un mécanisme similaire peut être utilisé pour vérifier l'état de chose:
<PRE>
>>> print sensors.provideSensor("3").knownState == ACTIve 
1
>>> print sensors.provideSensor("3").knownState == INACTIve
0
</PRE>
Notez que Jython utilise des «1» pour indiquer vrai, et «0» pour indiquer
faux, de sorte que le capteur 3 est actuellement actif dans cet exemple
<P>
Vous pouvez aussi appeler directement les méthodes, par exemple d'envoyer un paquet DCC
paquet pour les rails, vous tapez:
<PRE>   
   dcc.sendPacket([0x01, 0x03, 0xbb], 4) 
</PRE>
Cela envoie ce paquet de trois octets quatre fois, puis retourne à la ligne de commande.
<P>
Pour quitter, soit ^ C à partir de la ligne de commande ou utilisez la commande sortie dans le menu.  

<H2>Utilisation de Python pour signal logique et automatisation</h2>

Les classes "<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrit/automat/package-summary.html">Automate</a>"
existantes de JMRI fournissent des crochets pour l'automatisation de dispositifs utilisateur, y compris la signalisation.
Mais ils exigent que vous écriviez du code Java et de le compiler en fichiers .class.
<P>
La classe 
<A HREF="http://jmri.sourceforge.net/JavaDoc/doc/jmri/jmrit/automat/JythonAutomaton.html">JythonAutomaton</a>
 est destinée à faciliter la mise en page personnalisée du code d'automatisation, car elle vous permettra d'appeler un script Jython. Une fois qu'il est intégré dans le processus de configuration, vous serez capable de coder votre automatisation dans un ou plusieurs fichiers .Py, et ont le programme de démarrage pour les exécuter au démarrage.

<h2>Etapes suivantes</h2>
Nous sommes seulement à apprendre comment intégrer au mieux JMRI et Python, donc il y a encore quelques mystères fondamentaux.
<h3>Initialisation et modules</h3>
L'idée de "modules" Python  n'est pas encore clairement compris. Il y a trois façons de démarrer le programme via un fichier .py:
<OL>
<LI>
<PRE>
  % ./jmrithon
  Jython 2.1 on java1.4.1_01 (JIT: null)
  Taper "copyright", "credits" ou "license" pour plus d'informations
  >>> import JmriDemo
</PRE>
Cela fonctionne, en ce sens que le programme démarre. Mais les méthodes commodes sont toutes dans l'espace de nom JmriDemo:
<PRE>
  >>> turnouts.newTurnout("LT1","")
  Traceback (innermost last):
    File "<console>", line 1, in ?
  NameError: turnouts

  >>> JmriDemo.turnouts.newTurnout("LT1","")
  jmri.jmrix.loconet.LnTurnout@36b91b
</PRE>
ce qui rend pour le typage beaucoup plus tard.
Et il est déroutant, car selon que vous ayez commencé
JmriDemo, DecoderPro ou une autre application, les noms seront
 différents.
<LI>
<PRE>
  % ./jmrithon
  >>>  execfile("JmriDemo.py")
</PRE>

  % ./jmrithon -JmriDemo.py
</PRE>

Cela semble un peu moche, car ce n'est pas en utilisant les modules techniques normaux de Python
. Mais les méthodes commodes sont
dans l'espace de nom de niveau supérieur:
<PRE>
  turnouts.newTurnout("LT1", "")
</PRE>
<BR>
Nous avons besoin de comprendre si c'est une vraie question. La plupart des programmes Python
 n'utilisent pas cet espace de haut niveau, et il y a probablement
une bonne raison!
</OL>
Nous avons besoin de comprendre comment les développeurs de Jython ont prévu de faire ceci.

<h3> Résiliation </h3>
Une fois que le lien principal JMRI (ou lien Swing GUI ?) a commencé,
^ D ne suffit pas pour faire exister le programme. Vous devez sélectionner
"Quitter" dans le menu fichier réel, ou ^ C du programme.
<P>
Il serait bon de comprendre ce qui empêcher le programme
d'arrêter quand il obtient l'^D. 



<!--#include virtual="/Footer" -->
</body>
</html>
