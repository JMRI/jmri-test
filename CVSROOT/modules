
# build a JBuilder project directory in standard form
# Note that this does not work from JBuilder itself!
jbuilder -a runtime jbuilderfiles java
# build the java/ directory, which contains the actual JBuilder project
jbuilderfiles  -a jbuilder0 jbuilder1
jbuilder0 -d java scripts jmri.jpx
jbuilder1 -d java scripts JMRILibraries.library

# java target - the common java parts of a build directory
java -a java1 java2 java3
java1 -d java/src &jmri &apps &resources
java2 -d java &test
java3 -d java &lib

# runtime target - top level project runtime contents
runtime -a xml lib resources

# ant target - Ant directory in standard form, includes jbuilder
ant -a runtime antfiles java

# build the java/ directory for ant, including build.xml
antfiles  -a ant0 
ant0 -d java scripts build.xml manifest

# build the java/ directory for both ant and jbuilder
all -a runtime jbuilderfiles antfiles java


# properties target; all the properties files. Maintained manually!
properties -a \
        apps/AppsBundle.properties \
        apps/AppsConfigBundle.properties \
        jmri/jmrit/beantable/BeanTableBundle.properties \
        jmri/jmrit/display/DisplayBundle.properties \
        jmri/jmrit/JmritDebugBundle.properties \
        jmri/jmrit/JmritToolsBundle.properties \
        jmri/jmrit/powerpanel/PowerPanelBundle.properties \
        jmri/jmrit/roster/JmritRosterBundle.properties \
        jmri/jmrix/JmrixSystemsBundle.properties \
        jmri/jmrix/lenz/XNetBundle.properties \
        jmri/jmrix/loconet/LocoNetBundle.properties \
        jmri/NamedBeanBundle.properties \
        \
        apps/AppsBundle_de.properties \
        jmri/jmrit/beantable/BeanTableBundle_de.properties \
        jmri/jmrit/display/DisplayBundle_de.properties \
        jmri/jmrit/JmritDebugBundle_de.properties \
        jmri/jmrit/JmritToolsBundle_de.properties \
        jmri/jmrit/roster/JmritRosterBundle_de.properties \
        jmri/jmrix/JmrixSystemsBundle_de.properties \
        jmri/jmrix/loconet/LocoNetBundle_de.properties \
        \
        jmri/jmrit/roster/JmritRosterBundle_en_GB.properties 

# we're still missing a CodeWarrior target
# and due to repository mismatches (cant checkout two files from different
# CVS directories to a single location) we cant load the default.lcf file

# Three different line formats are valid:
#	key	-a    aliases...
#	key [options] directory
#	key [options] directory files...
#
# Where "options" are composed of:
#	-i prog		Run "prog" on "cvs commit" from top-level of module.
#	-o prog		Run "prog" on "cvs checkout" of module.
#	-e prog		Run "prog" on "cvs export" of module.
#	-t prog		Run "prog" on "cvs rtag" of module.
#	-u prog		Run "prog" on "cvs update" of module.
#	-d dir		Place module in directory "dir" instead of module name.
#	-l		Top-level directory only -- do not recurse.
#
# NOTE:  If you change any of the "Run" options above, you'll have to
# release and re-checkout any working directories of these modules.
#
# And "directory" is a path to a directory relative to $CVSROOT.
#
# The "-a" option specifies an alias.  An alias is interpreted as if
# everything on the right of the "-a" had been typed on the command line.
#
# You can encode a module within a module by using the special '&'
# character to interpose another module into the current module.  This
# can be useful for creating a module that consists of many directories
# spread out over the entire source repository.

