/*============================================================================*
 * WARNING      This class contains automatically modified code.      WARNING *
 *                                                                            *
 * The method initComponents() and the variable declarations between the      *
 * "// Variables declaration - do not modify" and                             *
 * "// End of variables declaration" comments will be overwritten if modified *
 * by hand. Using the NetBeans IDE to edit this file is strongly recommended. *
 *                                                                            *
 * See http://jmri.org/help/en/html/doc/Technical/NetBeansGUIEditor.shtml for *
 * more information.                                                          *
 *============================================================================*/
package org.jmri.core.ui.toolbar.power;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.MalformedURLException;
import java.net.URL;
import javax.swing.ImageIcon;
import jmri.InstanceManager;
import jmri.JmriException;
import jmri.PowerManager;
import org.jmri.application.JmriApplication;
import org.openide.awt.ToolbarPool;
import org.openide.util.NbBundle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author rhwood
 */
public class PowerPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(PowerPanel.class);

    /**
     * Creates new form PowerPanel
     */
    public PowerPanel() {
        initComponents();
        ToolbarPool.getDefault().addPropertyChangeListener(new PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                powerManagerPropertyChange(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        application = JmriApplication.getApplication();
        btnPower = new javax.swing.JButton();

        application.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                applicationPropertyChange(evt);
            }
        });

        btnPower.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jmri/core/ui/toolbar/power/powerUnknown.png"))); // NOI18N
        btnPower.setToolTipText(org.openide.util.NbBundle.getMessage(PowerPanel.class, "PowerPanel.btnPower.unknown.toolTipText")); // NOI18N
        btnPower.setBorderPainted(false);
        btnPower.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnPower.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPowerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPower)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnPower, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPowerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPowerActionPerformed
        try {
            switch (InstanceManager.powerManagerInstance().getPower()) {
                case PowerManager.OFF:
                case PowerManager.UNKNOWN:
                    InstanceManager.powerManagerInstance().setPower(PowerManager.ON);
                    break;
                case PowerManager.ON:
                    InstanceManager.powerManagerInstance().setPower(PowerManager.OFF);
                    break;
            }
        } catch (JmriException ex) {
            log.error("Unable to set layout power state.", ex);
        }
        this.powerManagerPropertyChange(null);
    }//GEN-LAST:event_btnPowerActionPerformed

    private void applicationPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_applicationPropertyChange
        if (application.isShown()) {
            InstanceManager.powerManagerInstance().addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    powerManagerPropertyChange(evt);
                }
            });
            this.powerManagerPropertyChange(null);
        }
    }//GEN-LAST:event_applicationPropertyChange

    private void powerManagerPropertyChange(PropertyChangeEvent evt) {
        try {
            String appendage = ".png";
            if (ToolbarPool.getDefault().getPreferredIconSize() == 24) {
                appendage = "24" + appendage;
            }
            if (application.isShown()) {
                try {
                    switch (InstanceManager.powerManagerInstance().getPower()) {
                        case PowerManager.OFF:
                            btnPower.setToolTipText(NbBundle.getMessage(PowerPanel.class, "PowerPanel.btnPower.off.toolTipText")); // NOI18N
                            btnPower.setIcon(new ImageIcon(new URL("nbres:/org/jmri/core/ui/toolbar/power/powerOff" + appendage)));
                            break;
                        case PowerManager.ON:
                            btnPower.setToolTipText(NbBundle.getMessage(PowerPanel.class, "PowerPanel.btnPower.on.toolTipText")); // NOI18N
                            btnPower.setIcon(new ImageIcon(new URL("nbres:/org/jmri/core/ui/toolbar/power/powerOn" + appendage)));
                            break;
                        case PowerManager.UNKNOWN:
                        default:
                            btnPower.setToolTipText(NbBundle.getMessage(PowerPanel.class, "PowerPanel.btnPower.unknown.toolTipText")); // NOI18N
                            btnPower.setIcon(new ImageIcon(new URL("nbres:/org/jmri/core/ui/toolbar/power/powerUnknown" + appendage)));
                            break;
                    }
                } catch (JmriException ex) {
                    log.error("Unable to set layout power state.", ex);
                }
            } else {
                btnPower.setIcon(new ImageIcon(new URL("nbres:/org/jmri/core/ui/toolbar/power/powerUnknown" + appendage)));
            }
        } catch (MalformedURLException ex) {
            log.error("Unable to set icon for power state.", ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jmri.application.JmriApplication application;
    private javax.swing.JButton btnPower;
    // End of variables declaration//GEN-END:variables
}
