<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id$ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Internationalization
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code I8N internationalization">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="/Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

	    <H1>JMRI: Internationalization</H1>
	    	    
This page discusses how the JMRI libraries handle internationalization.

<P>
The JMRI libraries are intended to be usable world-wide.
To make this possible, they make use of the "internationalization"
features built into the Java language and libraries.

<P>
You can also use this feature to customize your copy of JMRI.  For info
on this, please see the 
<A HREF="#custom">customization section</a>.

<h2>Use of Locales</h2>

JMRI uses the default Locale for locating internationalization
information.  That means that JMRI will present its user interface
in the language Java has defined as the default for that computer.

<P>
Locals are specified by a language, and optionally a country. The
language is a two letter lower-case code; the country is a two letter
upper case code.  "en" is English, "fr" is French, "de" is German, 
and "de_CH" is German as spoken in Switzerland.
<P>
When Java looks for resources (see below), it searches first for
a file with the complete current locale at the end of it's name 
(e.g. foo_de_CH.properties). If that fails, it tries for a file
ending in just the current locale's language:  foo_de.properties.
And if that fails, it goes to the defaults with no suffix:  foo.properties.
<P>
By installing appropriate files and allowing the user to select 
a default locale (as part of the 
<a href="../../../package/apps/TabbedPreferences.shtml#locale">advanced preferences</a>), 
we can
customize the program to different countries and languages.

<h2>Use of Resource Bundles</h2>
The text for menus, buttons and similiar controls is contained in
property files, which are accessed via the Resource Bundle mechanism
of java.util.
<P>
For example, the property file that's used to configure the Roster
panel contains lines like:
<PRE>
FieldRoadName       = Road Name:
</PRE>
To the left of the equal sign is the resource name that the program uses
to refer to the string; to the right of the equals sign is the
string that will be displayed.
<p>
By convention, resouce names for GUI elements start with one of
<OL>
<LI>Field - for a visible field, e.g. label, on the GUI
<LI>Button - for a GUI button
<LI>Menu - the name of a top-level menu
<LI>MenuItem - an item in a menu (may be a nested item)
<LI>ToolTip - contents of a tooltip
<LI>Error - for an error message displayed as part of the GUI
</ol>
Other resources are named so as not to conflict with these.

<H2>Adapting to a new language</h2>
The primary steps to adapt JMRI to a new language are:
<UL>
<LI>Create new versions of the .properties files to change the language
of the GUI controls.
<LI>Optionally, create new versions of GIF images used for logos
and icons.
</UL>
<P>
Get a clean copy of the source code using SVN.
(For more info on using SVN, please see the 
<A HREF="getcode.shtml">page on getting a copy of the code</a>.)
<P>
Then, make copies of the files with suffix for your
new locale.  On a Unix machine, this would be:
<PRE>
  cd apps
  cp AppsBundle.properties AppsBundle_xy.properties
  cp AppsConfigBundle.properties AppsConfigBundle_xy.properties
</PRE>
and so on.  
The easiest way to get the proper suffix is to set the
program to your particular language via the 
<a href="../../../package/apps/AppConfigPanel#locale">advanced preferences</a>, 
quit and restart the program,
and then look at the suffix that it displays on the main window.
You can also check the official 
<a href="http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt">list of languages</a>
(first part of the suffix) and 
<a href="http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm">list of countries/regions</a>
(optional second part of the suffix).
<p>
You can then edit those files to enter text in 
your own language. Please don't edit the lines in the 
file that contain things like $Release: $; those are used 
by 
<A HREF="SVNFAQ.shtml">SVN</a> 
to keep track of the history of changeds.
<P>
Languages that involve non-roman letters require some
extra care. The property files must contain only
ISO 8859-1 characters.  If you want to use unicode characters, 
these must be manually escaped.  
(The 'native2ascii' command-line tool can help with this.)

Please see the 
<A HREF="http://www.oracle.com/technetwork/java/javase/tech/faq-jsp-138165.html">Java internationalization FAQ</a>
for more info on how to include those characters in your property files, particularly the
question on "How do I specify non-ASCII strings in a properties file?".
<P>
All that adapts the program itself, at least as far as we've 
"internationalized" it.  (That's an ongoing effort, with 
more and more parts of the program able to be customized 
in each release).  
<P>
To check your work:
<OL>
<LI>Drop the entire "classes" directory into the "JMRI" directory containing your 
copy of the application.  This is the same directory that contains the jmri.jar file.  
<LI>Start the program and select "Preferences" from the Edit menu
<LI>Click the "show advanced preferences" box
<LI>Select your language from the "Locale" drop-down box,
<LI>Click "Save", quit and restart
<li>You should immediately seen the items you've translated.
</OL>
<P>
If there's a problem at this point, check to see what language is
listed on the startup screen that the application has displayed.  
Is it showing the same suffix (e.g. _fr or _cs_CZ) as you 
gave to your files?  The suffix the program uses is determined
by the Locale you selected in the preferences above.
<P>
To make your work available to other JMRI users, please 
use a TAR or ZIP utility to create an archive of the
<B>entire</b>
"properties" directory, including all the files you didn't modify,
and upload it to the "Patches" tracker on sourceforge:<br>
<A HREF="http://sourceforge.net/tracker/?group_id=26788&atid=388315">http://sourceforge.net/tracker/?group_id=26788&atid=388315</a>.
On this page:
<ul>
<LI>Click "Submit new"
<LI>Fill out the title and summary on the
new page that appears, 
<LI>Click the "check to upload and attach a file" 
box at the bottom, 
<LI>and then select your file "using the choose file" button.
<LI>Click "Submit" to upload the file and notify people that you've done this.
</ul>
By using this tracker and providing the <b>complete</b>
"properties" tree, it's easy for us to merge your new and/or changed
files into the code repository.

<P>
You may also want to provide additional language-specific 
features for users:
<UL>
<LI>Create new decoder XML files in the new language. (Although we're currently working on a method to greatly reduce the effort that would take)
<LI>Create a copy of the website and manuals.
<LI>Create new help files.
</UL>

<h2>English-only resources</h2>
Some parts of JMRI remain English only due to our developer population.
In particular, comments and variable names in the code should remain in
English, as should messages sent to the logging system.  
<P>
There are several properties files that are used for internal control,
and should not be translated.  These are marked by a comment at the top
of the file.  Examples are the apps/AppsStructureBundle.properties,
jmri/web/server/Services.properties and jmri/web/server/FilePaths.properties files.
<p>
In the XML files, the 'item' attributes have to stay untranslated, as 
does the entire names.xml file.

<A name="code"><h2>Translating JMRI to a new language</h2></a>

There are three parts to translating JMRI into a new language.  You have
to translate the properties files that the code uses, you have
to add translations to the XML files for decoder programming, and 
if you're really committed you can translate the help files.

<A name="code"><h3>Translating properties files</h3>

Translating the properties involves making new properties files for the
new language (some of this may have been done by an earlier translator)
and then translating their contents.
<OL>
<LI>
Obtain a copy of the appropriate set of source files from SVN.
Note that you really do need the set of files that's consistent
with the version of JMRI you're using.
See the <a href="getcode.shtml">getting code from SVN</a> page for more info.

<LI>
Under the java/src directory you'll find the JMRI code, which contains
files with names that end with .properties, for example:
<pre><code>
java/src/jmri/jmrit/JmritDebugBundle.properties
</code></pre>
For each of those that you're going to translate, make a 
copy with the language at the end of the name, for example
<pre><code>
java/src/jmri/jmrit/JmritDebugBundle_fr.properties
</code></pre>
for the French translation.
<LI>
Inside each file are lines containing key/value pairs for strings.
For example, a file might 
contain the line
<PRE>
FieldRoadName       = Road Name:
</PRE>
To the left of the equal sign is the name that the program uses
to refer to the string; to the right of the equals sign is the
string that will be displayed.
<p>
Translate the strings you want to translate in each file.
If you're unable to translate the entire file, (this part is important)
<i>remove the untranslated lines</i>!  The program will fall back to using the 
values from the original file for these, and this will greatly reduce the
chance of conflicts with a later version of JMRI.
</OL>

If that doesn't work, please get in touch so that we can help you find the
problem and improve the instructions.

<a id="xml"><h3>Translating XML files</h3>
XML files can also be internationalized.  There are examples in the 
decoder definition directories.  Look for elements with a xml:lang="fr"
attribute. Basically, you create additional elements with that attribute to 
specify the language used:
<code><pre>
      &lt;variable label="Vmid" CV="6" default="22" item="Vmid"&gt;
        &lt;decVal max="64"/&gt;
        &lt;label&gt;Vmid&lt;/label&gt;
        &lt;label xml:lang="fr"&gt;Vmoy&lt;/label&gt;
      &lt;/variable&gt;
</pre></code>

<a id="help"><h3>Translating help files</h3>
(This has only been done once, so these instructions may not be complete)
<p>
The English help files are found in the help/en directory.
If you want to create a complete set of files:
<ul>
<li>Create a copy of the existing files from the help/en
directory in a new help/LL directory, where LL is the language
code for your language, e.g. help/fr.  (Please be careful doing
this in SVN, and ask a developer for help if needed)
<li>Rename the help/fr/JmriHelp_en.hs file you just created to help/fr/JmriHelp_fr.hs
<li>Edit the help/fr/format.xsl to create a <code>&lt;HTML LANG="fr"&gt;</code> tag.
<li>Translate the .shtml files below the help/fr directory.  Do not translate
any .xml, .jhm files or the web*.shtml files in the top directory, as they
are automatically produced.
</ul>

<a name="dev"><h2>Internationalization for Developers</h2>

For internationalization to work, you have to do a few things in the code 
you write.
<p>
Some web references on how to do this:
<UL>
<li><A HREF="http://java.sun.com/docs/books/tutorial/i18n/index.html">Sun internationalization tutorial</a>(highly recommended)
<LI><A HREF="http://java.sun.com/j2se/1.3/docs/guide/intl/faq.html">Sun internationalization FAQ</a>
</UL>

<P>
First, you reference a Bundle object in your class that handles the lookup of 
strings:

<pre><code>
  java.util.ResourceBundle.getBundle("jmri.jmrit.beantable.LogixTableBundle");
</code></pre>

<P>
The getBundle argument is the complete package name (not file name)
for the properties file this class will be using.  You can have 
reference more than one of these objects if you'd like to look up 
strings in more than one properties file.

<P>
You can then retrieve particular strings like this:
<pre><code>
java.util.ResourceBundle.getBundle("jmri.jmrit.beantable.LogixTableBundle").getString("ButtonNew");
</code></pre>
<P>
We no longer recommend defining a class-static variable to hold the 
reference to the Bundle object, as this ends up consuming a lot 
of permanent memory in a program the size of JMRI.  Go ahead and 
call the getBundle() each time, it's fast because it works through
a weakly-referenced and garbage-collected cache.
<p>
Some messages need to have specific information inserted into them:
<pre><code>
  System name LT1 is already in use
</code></pre>
<P>
Here "LT1" can't be in the properties file, because it's only known
which name to display when the program is running.  Different languages
may put that part of the message in different places, and supporting that
is important.  To do that, use the message formatting tools that Java provides.
First, put a placeholder in the message definition:
<pre><code>
Error123 = System name {0} is already in use
</code></pre>
(You can have more than one insertion, called {1}, {2}, etc)
<P>
Next, format the final message by inserting the content into it:
<pre><code>
  String msg = java.text.MessageFormat.format(
				    rbx.getString("Error123"),
				    new String[]{badName});
</code></pre>
<P>
The first argument to the "format" call is the message itself; 
the second is an array of Strings to be inserted into the message.
(This is better than using String.format() because it allows
the inserted terms to appear in different orders in different languages.)
<P>
Different languages may need a different number of lines to express
a message, or may need to break it before or after a particular 
value is inserted.  It's therefore better to use "\n" within a
single message from the properties file to create line breaks, rather
than providing multiple lines in the code itself.

<p>
Second, you have to retrieve XML elements and attributes properly.
The jmri.util.jdom.LocaleSelector provides a getAttribute(...) method
that replaces the JDOM getAttribute element when the content of the 
attribute might have been internationalized.  You use it like this:

<code><pre>
String choice = LocaleSelector.getAttribute(choiceElement, "choice")
</pre></code>
where "choiceElement" is a JDOM element containing a (possible translated)
"choice" attribute.  Null will be returning if nothing is found.

<a id="testing">
<h3>Testing</h3>

You should check that you've properly internationalized 
your code.  We provide a tool for doing this which creates
and automatically translated version of your properties files,
following the ideas of Harry Robinson and Arne Thormodsen.
(Their
<a href="http://www.oocities.org/harry_robinson_testing/klingon.htm">paper on this</a> is recommended reading!)
To use it:
<ul>
<li>Make sure your code compiles and builds OK.  We'll be modifying the compiled version.
<li>Run the "translate.sh" script in your java/ build directory.  This creates new, temporary
properties files in the classes/ directory tree.
<li>Run the program via "ant locale", which starts the JmriDemo program
using the new properties files.  
</ul>
If all is well, all the message text will have been translated to upper case.
Anything you wrote that remains in lower case has not been completely internationalized.


<!--#include virtual="/Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

