// LocoIOTableModelTest.javapackage jmri.jmrix.loconet.locoio;import jmri.*;import java.io.*;import java.beans.PropertyChangeListener;import junit.framework.Test;import junit.framework.Assert;import junit.framework.TestCase;import junit.framework.TestSuite;import jmri.jmrix.loconet.*;/** * LocoIOTableModelTest.java * Description:	    tests for the Jmri package * @author			Bob Jacobsen * @version */public class LocoIOTableModelTest extends TestCase {	public void testObjectCreate() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1081, null);	}    // test mapping from cv mode values to strings    public void testModeFromValues() {		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        assertEquals("0x0F toggle switch", "Toggle switch", m.modeFromValues(0x0F, 0x1C10));        assertEquals("0x2F push low", "Pushbutton active low", m.modeFromValues(0x2F, 0x1C10));        assertEquals("0x6F push high", "Pushbutton active high", m.modeFromValues(0x6F, 0x1C10));        assertEquals("0x80 throw", "Turnout throw command", m.modeFromValues(0x80, 0x1C10));        assertEquals("0x80 close", "Turnout close command", m.modeFromValues(0x80, 0x1C30));        assertEquals("0xC0 push high", "Status message", m.modeFromValues(0xC0, 0xCC20));    }	// test read from toggle	public void testReadOperationToggle() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 2;		m.setValueAt(null, channel, LocoIOTableModel.READCOLUMN);        read3Sequence(channel, 0x0F, 0x1C, 0x10,lnis );        Assert.assertEquals("mode", "Toggle switch",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1c10", m.getValueAt(channel, m.ADDRCOLUMN));	}	// test read from pushbutton low	public void testReadOperationPushLow() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 5;		m.setValueAt(null, channel, LocoIOTableModel.READCOLUMN);        read3Sequence(channel, 0x2F, 0x1C, 0x10,lnis );        Assert.assertEquals("mode", "Pushbutton active low",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1c10", m.getValueAt(channel, m.ADDRCOLUMN));	}	// test read from pushbutton high	public void testReadOperationPushHigh() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 5;		m.setValueAt(null, channel, LocoIOTableModel.READCOLUMN);        read3Sequence(channel, 0x6F, 0x1C, 0x10,lnis );        Assert.assertEquals("mode", "Pushbutton active high",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1c10", m.getValueAt(channel, m.ADDRCOLUMN));	}    // test capture of OPC_INPUT_REP	public void testCaptureInputRep() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 5;		m.setValueAt(null, channel, LocoIOTableModel.CAPTURECOLUMN);        LocoNetMessage msg = new LocoNetMessage(3);        msg.setElement(0, LnConstants.OPC_INPUT_REP);        msg.setElement(1, 0x23);        msg.setElement(2, 0xF1);        m.message(msg);        Assert.assertEquals("addr", "23f1", m.getValueAt(channel, m.ADDRCOLUMN));        msg.setElement(0, LnConstants.OPC_INPUT_REP);        msg.setElement(1, 0xF0);        msg.setElement(2, 0x32);        m.message(msg);        Assert.assertEquals("addr", "23f1", m.getValueAt(channel, m.ADDRCOLUMN));	}    /**     * Service routine, runs through the sequence for a read operation,     * returning each of the three bytes given as arguments.     * @param channel The channel being read     * @param cv value returned for the configuration CV read     * @param addrlow value returned for the low address read     * @param addrhigh value returned for the high address read     * @param lnis Test interface for loconet i/o     */    void read3Sequence(int channel, int cv, int addrlow, int addrhigh,                        LocoNetInterfaceScaffold lnis ) {        int src;        int dst;        // check transmitted message        Assert.assertEquals("One message sent", 1, lnis.outbound.size());        LocoNetMessage msg = (LocoNetMessage)lnis.outbound.get(0);        // read low addr        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 2 "                            +Integer.toHexString(channel*3+4)+" 0 0 10 0 0 0 0 0 ", msg.toString());        // turn that message around as the echo 		lnis.sendTestMessage(msg);        Assert.assertEquals("listener present", 1, lnis.numListeners());        Assert.assertEquals("echo ignored", 1, lnis.outbound.size());        // turn around as the reply to the read low        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,addrlow); // low addr 		lnis.sendTestMessage(msg);        // 2nd read        Assert.assertEquals("reply does 2nd read", 2, lnis.outbound.size());        msg = (LocoNetMessage)lnis.outbound.get(1);        // CV11 for read high address        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 2 "                            +Integer.toHexString(channel*3+5)+" 0 0 10 0 0 0 0 0 ", msg.toString());        // turn around as the reply to the read high        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,addrhigh); 		lnis.sendTestMessage(msg);        // 3rd read        Assert.assertEquals("reply does 3rd read", 3, lnis.outbound.size());        msg = (LocoNetMessage)lnis.outbound.get(2);        // channel 2 (above) is CV 9 for read mode        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 2 "                            +Integer.toHexString(channel*3+3)+" 0 0 10 0 0 0 0 0 ", msg.toString());        // turnaround as the reply to the mode read        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,cv); // Toggle switch 		lnis.sendTestMessage(msg);        Assert.assertEquals("reply does no more messages", 3, lnis.outbound.size());    }    // test setting of mode, and its effect on address    public void testSetOnMode() {		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 12;        m.setValueAt("101c", channel, LocoIOTableModel.ADDRCOLUMN);        m.setValueAt("Turnout close command", channel, LocoIOTableModel.ONMODECOLUMN);        Assert.assertEquals("mode", "Turnout close command",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "103c", m.getValueAt(channel, m.ADDRCOLUMN));        m.setValueAt("Turnout throw command", channel, LocoIOTableModel.ONMODECOLUMN);        Assert.assertEquals("mode", "Turnout throw command",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "101c", m.getValueAt(channel, m.ADDRCOLUMN));    }    // test setting of address, and its effect on mode    public void testSetAddr() {		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 12;        m.setValueAt("Turnout close command", channel, LocoIOTableModel.ONMODECOLUMN);        m.setValueAt("1C10", channel, LocoIOTableModel.ADDRCOLUMN);        Assert.assertEquals("mode", "Turnout throw command",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1C10", m.getValueAt(channel, m.ADDRCOLUMN));        m.setValueAt("1c30", channel, LocoIOTableModel.ADDRCOLUMN);        Assert.assertEquals("mode", "Turnout close command",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1c30", m.getValueAt(channel, m.ADDRCOLUMN));    }	// test write from pushbutton high	public void testWriteOperationPushHigh() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);        int channel = 5;        m.setValueAt("1c10", channel, LocoIOTableModel.ADDRCOLUMN);        m.setValueAt("Pushbutton active high", channel, LocoIOTableModel.ONMODECOLUMN);		m.setValueAt(null, channel, LocoIOTableModel.WRITECOLUMN);        write3Sequence(channel, 0x6F, 0x1C, 0x10,lnis );        Assert.assertEquals("mode", "Pushbutton active high",                            m.getValueAt(channel, m.ONMODECOLUMN));        Assert.assertEquals("addr", "1c10", m.getValueAt(channel, m.ADDRCOLUMN));	}    /**     * Service routine, runs through the sequence for a write operation,     * checking each of the three bytes given as arguments.     * @param channel The channel being read     * @param cv value value expected for configuration CV read     * @param addrlow value expected for the low address read     * @param addrhigh value expected for the high address read     * @param lnis Test interface for loconet i/o     */    void write3Sequence(int channel, int cv, int val1, int val2,                        LocoNetInterfaceScaffold lnis ) {        int src;        int dst;        // check transmitted message        Assert.assertEquals("One message sent", 1, lnis.outbound.size());        LocoNetMessage msg = (LocoNetMessage)lnis.outbound.get(0);        // write low addr        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 1 "                            +Integer.toHexString(channel*3+4)+" 0 "                            +Integer.toHexString(val1)+" 10 0 0 0 0 0 ", msg.toString());        // turn that message around as the echo 		lnis.sendTestMessage(msg);        Assert.assertEquals("listener present", 1, lnis.numListeners());        Assert.assertEquals("echo ignored", 1, lnis.outbound.size());        // turn around as the reply to the read low        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,val1); // low addr 		lnis.sendTestMessage(msg);        // 2nd read        Assert.assertEquals("reply does 2nd read", 2, lnis.outbound.size());        msg = (LocoNetMessage)lnis.outbound.get(1);        // CV11 for read high address        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 1 "                            +Integer.toHexString(channel*3+5)+" 0 "                            +Integer.toHexString(val2)+" 10 0 0 0 0 0 ", msg.toString());        // turn around as the reply to the read high        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,val2); 		lnis.sendTestMessage(msg);        // 3rd read        Assert.assertEquals("reply does 3rd read", 3, lnis.outbound.size());        msg = (LocoNetMessage)lnis.outbound.get(2);        // channel 2 (above) is CV 9 for read mode        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 1 "                            +Integer.toHexString(channel*3+3)+" 0 "                            +Integer.toHexString(cv)+" 10 0 0 0 0 0 ", msg.toString());        // turnaround as the reply to the mode read        src = msg.getElement(2);        dst = msg.getElement(3);        msg.setElement(2, dst);        msg.setElement(3, src);        msg.setElement(4, 0x01);  // seems to be fixed PC address high        msg.setElement(14,cv); // Toggle switch 		lnis.sendTestMessage(msg);        Assert.assertEquals("reply does no more messages", 3, lnis.outbound.size());    }	// test for outgoing read request	public void testSendReadCommand() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);		m.sendReadCommand(1);        // check transmitted message        Assert.assertEquals("One message sent", 1, lnis.outbound.size());        LocoNetMessage msg = (LocoNetMessage)lnis.outbound.get(0);        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 2 1 0 0 10 0 0 0 0 0 ", msg.toString());	}	// test for outgoing write request	public void testSendWriteCommand() {		// prepare an interface		LocoNetInterfaceScaffold lnis = new LocoNetInterfaceScaffold();		LocoIOTableModel m = new LocoIOTableModel(0x1051, null);		m.sendWriteCommand(1, 0x31);        // check transmitted message        Assert.assertEquals("One message sent", 1, lnis.outbound.size());        LocoNetMessage msg = (LocoNetMessage)lnis.outbound.get(0);        Assert.assertEquals("message length", 16, msg.getNumDataElements());        Assert.assertEquals("message opCode", 0xE5, msg.getOpCode());        Assert.assertEquals("message bytes", "e5 10 50 51 10 0 1 1 0 31 10 0 0 0 0 0 ", msg.toString());	}	// from here down is testing infrastructure	public LocoIOTableModelTest(String s) {		super(s);	}	// Main entry point	static public void main(String[] args) {		String[] testCaseName = {LocoIOTableModelTest.class.getName()};		junit.swingui.TestRunner.main(testCaseName);	}	// test suite from all defined tests	public static Test suite() {		TestSuite suite = new TestSuite(LocoIOTableModelTest.class);		return suite;	}	 static org.apache.log4j.Category log = org.apache.log4j.Category.getInstance(LocoIOTableModelTest.class.getName());}