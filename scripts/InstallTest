#! /bin/sh
#
# Script to start a JMRI 2.9.1 application
#
# If you need to add any additional Java options or defines,
# include them in the JMRI_OPTIONS environment variable
#
# You can run separate instances of the program with their
# own preferences and setup if you either
# *) Provide the name of a configuration file as the 1st argument
# or
# *) Copy and rename this script.
#
# If you rename the script to e.g. JmriNew, it will use "JmriNewConfig2.xml"
# as it's configuration file.  You can then set and save the preferences for
# the next time you rerun the script.
#
# If you are getting X11 warnings about meta keys, uncomment the next line
# xprop -root -remove _MOTIF_DEFAULT_BINDINGS
#
# Known/used environment variables:
#    JMRI_HOME: JMRI install directory, default is script location
#    JMRI_OPTIONS: Extra options added at front of java command
#    HOME: User home directory, used to locate JMRI preferences directory
#    DEBUG:  If not empty, print debugging info to stdout
#    python.home:  If not present, defined in preferences directory
#    jmri.log.path:  If not present, defined in preferences directory
#
# For more information, please see
# http://jmri.sourceforge.net/install/ShellScripts.shtml
#
# $Revision: 1.8 $ (CVS maintains this line, do not edit please)

# define the class to be invoked
CLASSNAME=apps.InstallTest.InstallTest

# set DEBUG to anything to see debugging output
DEBUG=yes

# if JMRI_HOME is defined, go there, else
# change directory to where the script is located
if test ${JMRI_HOME}; then
    cd ${JMRI_HOME};
else 
    cd `dirname $0`;
fi
if test ${DEBUG}; then echo PWD: ${PWD}; fi

# build classpath dynamically
CP=".:classes:java/classes"
# list of jar files in home, not counting jmri.jar
LOCALJARFILES=`ls *.jar | grep -v jmri.jar | tr "\n" ":"`
if test ${LOCALJARFILES}; then CP=${CP}:${LOCALJARFILES}; fi
# add jmri.jar
CP=${CP}:jmri.jar
# and contents of lib
CP=${CP}:`ls -m lib/*.jar | tr -d " \n" | tr "," ":"`
if test ${DEBUG}; then echo CLASSPATH: ${CP}; fi

# configuration file name is 1st argument. 
# If not provided, build config file name dynamically
APPNAME=`basename $0`
if test $1; then 
    CONFIGFILE=$1;
else
    CONFIGFILE=${APPNAME}Config2.xml;
fi
if test ${DEBUG}; then echo CONFIGFILE: ${CONFIGFILE}; fi

# locate preferences directory and define variable, plus
# variables pointing to directories below that
if test ${HOME}; then
    PREFSDIR=${HOME}/.jmri
    if test ${DEBUG}; then echo PREFSDIR: ${PREFSDIR}; fi
    # ensure exists
    if [[ ! [ -a ${PREFSDIR}] ]]; then mkdir ${PREFSDIR}; fi
    if [[ ! [ -a ${PREFSDIR}/systemfiles] ]]; then mkdir ${PREFSDIR}/systemfiles; fi
        
    # if not defined already, define python.home
    if test ${python.home}; then
        python.home=${PREFSDIR}/systemfiles
    fi
    if test ${DEBUG}; then echo python.home: ${python.home}; fi
    
    # if not defined already, define jmri.log.path
    if test ${jmri.log.path}; then
        jmri.log.path=${PREFSDIR}/systemfiles/
    fi
    if test ${DEBUG}; then echo jmri.log.path: ${jmri.log.path}; fi

# if HOME not defined
else
    if test ${DEBUG}; then echo HOME not defined, variables not set; fi 
fi

# create the option string
#
# Add JVM and RMI options to user options, if any
OPTIONS="${JMRI_OPTIONS} -noverify"
OPTIONS="${OPTIONS} -Djava.security.policy=lib/security.policy"
OPTIONS="${OPTIONS} -Djava.rmi.server.codebase=file:java/classes/"
OPTIONS="${OPTIONS} -Djava.library.path=.:lib"
# ddraw is disabled to get around Swing performance problems in Java 1.5.0
OPTIONS="${OPTIONS} -Dsun.java2d.noddraw"
# memory start and max limits
#OPTIONS="${OPTIONS} -Xms10m"
#OPTIONS="${OPTIONS} -Xmx60m"
# MacOS X specific options
OPTIONS="${OPTIONS} -Dapple.laf.useScreenMenuBar=true"
OPTIONS="${OPTIONS} -Dcom.apple.macos.useScreenMenuBar=true"
OPTIONS="${OPTIONS} -Dcom.apple.mrj.application.apple.menu.about.name=${APPNAME}"
# RXTX options (only works in some versions)
OPTIONS="${OPTIONS} -Djavax.comm.rxtx.NoVersionOutput=true"
if test ${DEBUG}; then echo OPTIONS: ${OPTIONS}; fi

# locate alternate serial ports
ALTPORTS=`ls -fm /dev/ttyUSB* /dev/ttyACM* 2>/dev/null | tr -d " \n" | tr "," ":"`
if test ${ALTPORTS}; then ALTPORTS=-Djavax.comm.rxtx.SerialPorts=${ALTPORTS}; fi
if test ${DEBUG}; then echo ALTPORTS: ${ALTPORTS}; fi

java ${OPTIONS} ${ALTPORTS} -cp ${CP} ${CLASSNAME} ${CONFIGFILE}


