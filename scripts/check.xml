<!-- Special build file for doing Java 1.1.8 compatibility tests -->
<!-- Bob Jacobsen, Copyright 2002, 2003, 2004 -->
<!-- Revision $Revision: 1.16 $ -->

<project name="JMRI" default="check" basedir=".">

<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

  <description>
  Check JMRI for Java 1.1.8 compatibility
  </description>

  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="test" value="test"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value=".."/>
  <property name="jarname" value="jmri.jar"/>

  <!-- get properties from environment.  Env.JDK and Env.JDK1 are desired -->
  <property environment="Env" />
  <property name="Env.JDK" value="javac" />
  <property name="Env.JDK1" value="oldjavac" />
  
  <path id="project.class.path">
    <pathelement location="../lib/collections.jar" />
    <pathelement location="../lib/crimson.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/jdom-jdk11.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/jh.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="../lib/MRJAdapter.jar" />
    <pathelement location="classes/" />
  </path>

  <!-- special path including Java 1.1.8 libraries -->
  <path id="compile1.1.8.path">
      <pathelement location="lib118/JDKClasses.zip"/>
      <pathelement location="lib118/swingall.jar"/>
      <path refid="project.class.path"/>
  </path>


  <!-- targets deferred to primary -->

  <target name="init" description="create needed directories">
    <ant target="init" antfile="build.xml" />
  </target>

  <target name="clean">
    <ant target="clean" antfile="build.xml" />
  </target>

  <target name="rmic">
    <ant target="rmic" antfile="build.xml" />
  </target>
  
  <!-- some targets to make sure setup still OK -->

  <target name="version">
    <echo message="${java.version}"/>
    <echo message="${Env.JDK}"/>
    <echo message="${Env.JDK1}"/>
  </target>


  <target name="libcheck">
    <available file="lib118/JDKClasses.zip" property="jdk.present"/>
    <available file="lib118/swingall.jar" property="swingall.present"/>
    <antcall target="swingcheck" />
    <antcall target="jdkcheck" />
  </target>
  
  <target name="swingcheck" unless="swingall.present">
  	<fail message="lib118/swingall.jar not present" />
  </target>
  <target name="jdkcheck" unless="jdk.present">
  	<fail message="lib118/JDKClasses.zip not present" />
  </target>
  
  <target name="nativecompile" depends="init" 
        description="compile specific files requiring Java 1.3 libraries">
    <!-- Compile the java code from ${files} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           includes="
                 jmri/util/FileUtil.java,
                 jmri/util/FontUtil.java,
                 jmri/util/JmriJFrame.java,
                 jmri/util/JTabbedPaneUtil.java,
                 jmri/util/JTableUtil.java,
                 jmri/util/JTreeUtil.java,
                 jmri/util/LocaleUtil.java,
                 jmri/util/PythonInterp.java,
                 jmri/util/RuntimeUtil.java, 
                 jmri/util/StringUtil.java, 
                 jmri/util/SwingUtil.java, 
                 jmri/util/com/sun/TableSorter.java,
                 jmri/jmrit/throttle/ControlPanel.java
           "
           
           target="1.1"
           fork="yes"
           executable="${Env.JDK}"
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>


  <target name="compile" description="compile for 1.1.8 JVM, with all its oddities">
    <!-- Check and initialize -->
    <antcall target="libcheck"/>
    <antcall target="clean"/>
    <antcall target="init"/>

    <!-- Compile protected Java 1.3 classes with 1.3 compiler, path -->
    <antcall target="nativecompile"/>

    <!-- Compile "synchronized" code using classic compiler -->
    <echo message="Create compile command for 1.1.8 files"/>
    <exec executable="./synchlist.csh" />
    <echo message="and run the resulting Ant task" />
    <ant target="ClassicCompile" antfile="ClassicCompile.xml"/>	

    <!-- Compile any 1.3-path file that needs to be after the Classic  -->
    <!-- compile to avoid triggering a compiler fault -->
    <!-- (Not currently in use -->

    <!-- Compile using 1.3 compiler classes that should compile with 1.1.8 path -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           target="1.1" 
           fork="yes"
           executable="${Env.JDK}"
           debug="yes" >
       <bootclasspath refid="compile1.1.8.path" />
       <classpath refid="project.class.path"    />
    </javac>


    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>

  </target>

  <!-- and now the main "check" target, the reason for this file -->
    
  <target name="tests" description="compile tests for 1.1.8 compatibility check"
                depends="init">
    <!-- compile tests -->
	<echo message="Compile tests"/>
    <javac srcdir="${test}" 
           destdir="${target}"
           target="1.1" 
           fork="yes"
           executable="${Env.JDK1}"
           debug="yes" >
       <bootclasspath refid="compile1.1.8.path" />
       <classpath refid="project.class.path"    />
    </javac>
 </target>
 
  <target name="check" description="check for 1.1.8 compatibility"
                depends="init, compile, tests">
    <!-- run alltest -->
    <java classname="apps.tests.AllTest"
          dir=".." 
          fork="yes" >
       <classpath refid="compile1.1.8.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>

  </target>

  <target name="jar" depends="compile, rmic"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/${jarname}" 
         basedir="${target}"
         manifest="manifest" 
         compress="true" />   <!-- compress="true" is default -->
    <!-- create the index, using the information in the manifest -->
    <exec executable="jar" dir="${jartarget}">
    	<arg line="i ${jarname}"/>
    </exec>
  </target>

 <!-- dist target forces the jar file to be built without test classes -->
 <target name="dist" depends="clean, init, compile, rmic, jar"
 		 description="create a distribution jar file"/>

</project>