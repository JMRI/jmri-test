<!-- ugly first attempt at an ANT build.xml file for JMRI development -->
<!-- Bob Jacobsen, April 2002 -->
<!-- Revision $Revision: 1.31 $ -->

<project name="JMRI" default="compile" basedir=".">
<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

  <description>
  Provides build services for JMRI libraries and applications
  </description>

  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="test" value="test"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value=".."/>

  <path id="project.class.path">
    <pathelement location="../lib/collections.jar" />
    <pathelement location="../lib/crimson.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/jdom-jdk11.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="classes/" />
  </path>

  <path id="compile1.1.8.path">
      <pathelement location="lib/JDKClasses.zip"/>
      <pathelement location="lib/swingall.jar"/>
      <path refid="project.class.path"/>
  </path>

  <target name="init" description="create needed directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${target}"/>
    <mkdir dir="${target}/resources" />
  </target>

  <target name="clean" description="remove compilation results to force rebuild">
    <delete includeEmptyDirs="true">
      <fileset dir="classes"/>
    </delete>
  </target>

  <target name="compile" depends="init" description="compile source, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           target="1.1" 
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
  </target>

  <target name="rmic" depends="compile" description="build RMI stubs and compile">
    <!-- Run rmic on specified classes -->
    <rmic includes="**/LnMessageBuffer.class, **/LnMessageServer.class"
           base="${target}" stubversion="1.1">
       <classpath refid="project.class.path"    />
    </rmic>
  </target>

  <target name="tests" depends="compile" description="compile test classes">
    <!-- Compile the test java code from ${source} into ${target} -->
    <javac srcdir="${test}" 
           destdir="${target}" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="decoderpro" depends="compile" description="build and run DecoderPro app">
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <jvmarg value="-Xms7m"/>
       <jvmarg value="-Xmx10m"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
    </java>
 </target>

  <target name="panelpro" depends="compile" description="build and run PanelPro app">
    <java classname="apps.PanelPro.PanelPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
 </target>

  <target name="jmridemo" depends="compile" description="build and run JmriDemo app">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
  </target>

  <target name="locotools" depends="compile" description="build and run LocoTools app">
    <java classname="apps.LocoTools.LocoTools"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
 </target>

  <target name="cornwall" depends="compile" description="build and run CornwallRR app">
    <java classname="apps.cornwall.CornwallRR"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
 </target>

  <target name="profile" depends="compile" description="build and run JmriDemo app with profiling">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <jvmarg value="-Xrunhprof:cpu=samples,heap=sites,file=log.txt,depth=10" />
    </java>
  </target>

  <target name="alltest" depends="compile, tests" description="build and run test suite">
    <java classname="apps.tests.AllTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
  </target>

  <target name="jar" depends="compile, rmic"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/jmri.jar" 
         basedir="${target}"
         manifest="manifest" 
         compress="true" />   <!-- compress="true" is default -->
    <!-- create the index -->
    <exec executable="jar" dir="${jartarget}">
    	<arg line="-i jmri.jar"/>
    </exec>
  </target>

  <target name="javadoc" depends="init" description="create JavaDocs">
    <javadoc packagenames="jmri.*, apps.*"
           sourcepath="src"
           overview="src/jmri/overview.html"
           defaultexcludes="yes"
           destdir="doc"
           additionalparam="-breakiterator"
           author="false"
           version="false"
           use="true"
           windowtitle="JMRI API">
      <group title="Core" packages="jmri"/>
      <group title="Layout Connections" packages="jmri.jmrix:jmri.jmrix.*"/>
      <group title="Cross-system Tools" packages="jmri.jmrit:jmri.jmrit.*"/>
      <group title="Applications" packages="apps:apps.*"/>
      <classpath refid="project.class.path"    />
      <doctitle><![CDATA[<h1>JMRI Library API</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2003 JMRI; All Rights Reserved.</i>
                       Site hosted by: 
                       <A href="http://sourceforge.net"> 
                       <IMG src="http://sourceforge.net/sflogo.php?group_id=26788&type=1" width="88" height="31" border="0" alt="SourceForge Logo"> </A>
                ]]></bottom>
      <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
    </javadoc>
  </target>

  <target name="uploadjavadoc" depends="javadoc" description="create and upload JavaDocs">
    <exec executable="scp">
      <arg value="-r"/>
      <arg value="doc"/>
      <arg value="jacobsen@jmri.sf.net:htdocs/Technical/"/>
    </exec>
  </target>

 <!-- dist target forces the jar file to be built without test classes -->
 <target name="dist" depends="clean, init, compile, rmic, jar"
 		 description="create a distribution jar file"/>



 <property name="release" value="NO_RELEASE_SPECIFIED" />
 <property name="number"  value="NO_NUMBER_SPECIFIED"  />
 <target name="release1" depends=""
 					description="part 1 of build a release; useage is ant -Drelease=Release-1-2-3 -Dnumber=1.2.3 release1">
 	<echo message="Building ${release} numbered ${release}" />
    <delete dir="${release}" />
    <mkdir dir="${release}"/>
    <echo message="cvs checkout" />
    <cvs package="ant" dest="${release}" tag="${release}"/>

    <echo message="test" />
    <ant dir="${release}/java" target="alltest" />
    
    <echo message="run decoderpro; check version, startup!" />
    <ant dir="${release}/java" target="decoderpro" />
    
    <echo message="make distribution jar" />
    <ant dir="${release}/java" target="dist" />
    
    <echo message="update files in master Windows directory" />
    <copy todir="Windows/JMRI">
      <fileset dir="${release}" includes="jmri.jar"  /> 
    </copy>
    <delete dir="Windows/JMRI/xml" />
    <cvs command="export" package="xml" dest="Windows/JMRI" tag="${release}"/>
    <delete dir="Windows/JMRI/resources" />
    <cvs command="export" package="resources" dest="Windows/JMRI" tag="${release}"/>

    <echo message="update files in master MacOSX directory" />
    <copy todir="MacOSX/JMRI">
      <fileset dir="${release}" includes="jmri.jar"  /> 
    </copy>
    <delete dir="MacOSX/JMRI/xml" />
    <cvs command="export" package="xml" dest="MacOSX/JMRI" tag="${release}"/>
    <delete dir="MacOSX/JMRI/resources" />
    <cvs command="export" package="resources" dest="MacOSX/JMRI" tag="${release}"/>

    <echo message="update files in master Linux directory" />
    <copy todir="Linux/JMRI">
      <fileset dir="${release}" includes="jmri.jar"  /> 
    </copy>
    <delete dir="Linux/JMRI/xml" />
    <cvs command="export" package="xml" dest="Linux/JMRI" tag="${release}"/>
    <delete dir="Linux/JMRI/resources" />
    <cvs command="export" package="resources" dest="Linux/JMRI" tag="${release}"/>

    <echo message="update files in master MacClassic directory" />
    <copy todir="MacClassic/JMRI">
      <fileset dir="${release}" includes="jmri.jar"  /> 
    </copy>
    <delete dir="MacClassic/JMRI/xml" />
    <cvs command="export" package="xml" dest="MacClassic/JMRI" tag="${release}"/>
    <delete dir="MacClassic/JMRI/resources" />
    <cvs command="export" package="resources" dest="MacClassic/JMRI" tag="${release}"/>

    <echo message="update files in master OS2 directory" />
    <copy todir="OS2/JMRI">
      <fileset dir="${release}" includes="jmri.jar"  /> 
    </copy>
    <delete dir="OS2/JMRI/xml" />
    <cvs command="export" package="xml" dest="OS2/JMRI" tag="${release}"/>
    <delete dir="OS2/JMRI/resources" />
    <cvs command="export" package="resources" dest="OS2/JMRI" tag="${release}"/>

    
	<!-- The following steps build the distribution archives -->
    <!-- using MacOSX tools -->
    <echo message="build archives"/>
    <exec executable="open">
    	<arg line="-a /Applications/Utilities/StuffItLite6.5.1/DropStuff MacOSX/JMRI"/>
    </exec>
    <exec executable="open">
    	<arg line="-a /Applications/Utilities/StuffItLite6.5.1/DropTar Linux/JMRI"/>
    </exec>
    <exec executable="open">
    	<arg line="-a /Applications/Utilities/StuffItLite6.5.1/DropZip OS2/JMRI"/>
    </exec>

	<echo message="build the Windows .exe now"/>
	<echo message="end of part 1; do part 2 after MacOSX, Linux, OS2 uploads completely built"/>
 </target>
 
 <target name="release2" depends=""
 					description="part 2 of build a release; useage is ant -Drelease=R1.2.3 -Dnumber=1.2.3 release2">
    <exec executable="open">
    	<arg line="-a /Applications/Utilities/StuffItLite6.5.1/DropStuff MacClassic/JMRI"/>
    </exec>
    <move file="MacOSX/JMRI.hqx" tofile="JMRI.${number}.hqx" />
    <move file="Linux/JMRI.tgz" tofile="JMRI.${number}.tgz" />
    <move file="OS2/JMRI.zip" tofile="JMRI.${number}.zip" />
	<echo message="end of part 2; do part 3 after MacClassic upload completely built"/>
</target>

 <target name="release3" depends=""
 					description="part 3 of build a release; useage is ant -Drelease=R1.2.3 -Dnumber=1.2.3 release3">


    <move file="MacClassic/JMRI.hqx" tofile="JMRI.${number}.Classic.hqx" />
	<echo message="upload Mac (2), OS2, Linux files"/>
    <ftp server="upload.sourceforge.net"
         userid="ftp" password="jake@physics.berkeley.edu"
         action="put"
         verbose="yes" remotedir="incoming" >
      <fileset dir="." includes="JMRI.${number}.hqx, JMRI.${number}.tgz, JMRI.${number}.Classic.hqx, JMRI.${number}.zip" />
    </ftp>

	<echo message="end of part 3; part 4 will do the windows upload when ready"/>
	<echo message="make sure Release.${number}.exe is present"/>

 </target>
 
 <target name="release4" depends=""
 					description="part 4 of build a release; useage is ant -Drelease=R1.2.3 -Dnumber=1.2.3 release4">
	<echo message="upload files"/>
    <ftp server="upload.sourceforge.net"
         userid="ftp" password="jake@physics.berkeley.edu"
         action="put"
         verbose="yes" remotedir="incoming" >
      <fileset dir="." includes="JMRI.${number}.exe" />
    </ftp>
 
 	<echo message="upload javadocs"/>
    <ant dir="${release}/java" target="uploadjavadoc" />
 </target>
 				
  <!-- The following is a long, ugly cut&paste of various -->
  <!-- other targets (compile, test, alltest) which should -->
  <!-- be refactored at some point -->
  <target name="check1.1.8" depends="clean, init" description="compile source against 1.1.8 libs and run alltest with 1.1.8">
    <!-- Compile specific classes with regular path -->
    <javac  srcdir = "${source}"
           destdir="${target}" 
           includes="jmri/util/StringUtil.java, 
                 jmri/util/FontUtil.java,
                 jmri/util/JTreeUtil.java,
                 jmri/util/LocaleUtil.java"
           target="1.1" 
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
    <!-- Compile the java 1.1.8 code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           target="1.1" 
           debug="no" >
       <bootclasspath refid="compile1.1.8.path" />
       <classpath refid="project.class.path"    />
    </javac>
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
    <!-- compile tests -->
    <javac srcdir="${test}" 
           destdir="${target}"
           target="1.1" 
           debug="no" >
       <bootclasspath refid="compile1.1.8.path" />
       <classpath refid="project.class.path"    />
    </javac>
    <!-- run alltest -->
    <java classname="apps.tests.AllTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="compile1.1.8.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>

  </target>

</project>


