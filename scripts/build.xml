<!-- ugly first attempt at an ANT build.xml file for JMRI development -->
<!-- Bob Jacobsen, April 2002 -->
<!-- Revision $Revision: 1.52 $ -->

<project name="JMRI" default="compile" basedir=".">
<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

<!-- Note that this file controls builds for JVM 1.3 and later. -->
<!-- All of the builds for JVM 1.1.8 are done via the check.xml file -->

  <description>
  Provides build services for JMRI libraries and applications
  </description>

  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="test" value="test"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value=".."/>

  <path id="project.class.path">
    <pathelement location="../lib/collections.jar" />
    <pathelement location="../lib/crimson.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/jdom-jdk11.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/jh.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="classes/" />
  </path>

  <target name="init" description="create needed directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${target}"/>
    <mkdir dir="${target}/resources" />
  </target>

  <target name="clean" description="remove compilation results to force rebuild">
    <delete includeEmptyDirs="true">
      <fileset dir="classes"/>
    </delete>
  </target>


  <target name="compile" depends="init" description="compile source, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           target="1.3" 
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
  </target>

  <target name="debug" depends="init" description="compile source with debugging on, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           target="1.3" 
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
  </target>

  <target name="rmic" depends="compile" description="build RMI stubs and compile">
    <!-- Run rmic on specified classes -->
    <rmic includes="**/LnMessageBuffer.class, **/LnMessageServer.class"
           base="${target}" stubversion="1.1">
       <classpath refid="project.class.path"    />
    </rmic>
  </target>

  <target name="tests" depends="compile" description="compile test classes">
    <!-- Compile the test java code from ${source} into ${target} -->
    <javac srcdir="${test}" 
           destdir="${target}"
           target="1.3" 
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="decoderpro" depends="compile" description="build and run DecoderPro app">
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <jvmarg value="-Xms7m"/>
       <jvmarg value="-Xmx20m"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
    </java>
 </target>

  <target name="panelpro" depends="compile" description="build and run PanelPro app">
    <java classname="apps.PanelPro.PanelPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <target name="jmridemo" depends="compile" description="build and run JmriDemo app">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
  </target>

  <target name="locotools" depends="compile" description="build and run LocoTools app">
    <java classname="apps.LocoTools.LocoTools"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <target name="cornwall" depends="compile" description="build and run CornwallRR app">
    <java classname="apps.cornwall.CornwallRR"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <!-- this really doesn't work, as it doesn't hook up stdin right -->
  <target name="packetpro" depends="compile" description="build and run PacketPro app">
    <exec executable="csh" dir="${jartarget}">
      <arg value="PacketPro.csh"/>
    </exec>
 </target>


  <target name="profile" depends="compile" description="build and run JmriDemo app with profiling">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <jvmarg value="-Xrunhprof:cpu=samples,heap=sites,file=log.txt,depth=10" />
    </java>
  </target>

  <target name="alltest" depends="compile, tests" description="build and run test suite">
    <java classname="apps.tests.AllTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
  </target>

  <target name="jar" depends="compile, rmic"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/jmri.jar" 
         basedir="${target}"
         manifest="manifest" 
         compress="true" />   <!-- compress="true" is default -->
    <!-- create the index, using the information in the manifest -->
    <exec executable="jar" dir="${jartarget}">
    	<arg line="i jmri.jar"/>
    </exec>
  </target>

  <target name="javadoc" depends="init" description="create JavaDocs">
    <javadoc packagenames="jmri.*, apps.*"
           sourcepath="src"
           overview="src/jmri/overview.html"
           defaultexcludes="yes"
           destdir="doc"
           additionalparam="-breakiterator"
           author="false"
           version="false"
           use="true"
           windowtitle="JMRI API">
      <group title="Core" packages="jmri"/>
      <group title="Cross-system Tools" packages="jmri.jmrit:jmri.jmrit.*"/>
      <group title="Layout Connections" packages="jmri.jmrix:jmri.jmrix.*"/>
      <group title="Utilities" packages="jmri.util:jmri.util.*"/>
      <group title="XML persistance" packages="jmri.configurexml:apps.configurexml"/>
      <group title="Applications" packages="apps:apps.*"/>
      <group title="Implementations" packages="jmri.managers:jmri.progdebugger:jmri.layout"/>
	  
      <classpath refid="project.class.path"    />
      <doctitle><![CDATA[<h1>JMRI Library API</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2003 JMRI; All Rights Reserved.</i>
                       Site hosted by: 
                       <A href="http://sourceforge.net"> 
                       <IMG src="http://sourceforge.net/sflogo.php?group_id=26788&type=1" width="88" height="31" border="0" alt="SourceForge Logo"> </A>
                ]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.1/docs/api/" />
    </javadoc>
  </target>

  <target name="uploadjavadoc" depends="javadoc" description="create and upload JavaDocs">
    <exec executable="scp">
      <arg value="-r"/>
      <arg value="doc"/>
      <arg value="jacobsen@jmri.sf.net:htdocs/JavaDoc/"/>
    </exec>
  </target>

 <!-- dist target forces the jar file to be built without test classes -->
 <target name="dist" depends="clean, init, compile, rmic, jar"
 		 description="create a distribution jar file"/>


</project>


