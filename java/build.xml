<!-- Ant build.xml file for JMRI development -->
<!-- Bob Jacobsen, Copyright 2002, 2003, 2004 -->
<!-- Revision $Revision: 1.12 $ -->

<!-- This file is part of JMRI.                                             -->
<!--                                                                        -->
<!-- JMRI is free software; you can redistribute it and/or modify it under  -->
<!-- the terms of version 2 of the GNU General Public License as published  -->
<!-- by the Free Software Foundation. See the "COPYING" file for a copy     -->
<!-- of this license.                                                       -->
<!--                                                                        -->
<!-- JMRI is distributed in the hope that it will be useful, but WITHOUT    -->
<!-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  -->
<!-- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  -->
<!-- for more details.                                                      -->

<project name="JMRI" default="debug" basedir=".">
<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

  <description>
  Provides build services for JMRI libraries and applications
  </description>

  <!-- options you might want to change during development,   -->
  <!-- but please change them back before commiting this file -->
  
    <!-- should compiler warn of use of deprecated APIs? (yes/no) -->
    <property name="deprecation" value="no" />
  
    <!-- SDK version (currently 1.4) -->
    <property name="sdk_version" value="1.4" />
  
    <!-- source code version (currently 1.3) -->
    <property name="source_version" value="1.3" />
  
    <!-- JRE version (currently 1.3) -->
    <property name="jre_version" value="1.3" />
    
  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="test" value="test"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value=".."/>
  <property name="doctarget" value="doc"/>
  
  <path id="project.class.path">
    <pathelement location="../lib/crimson.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/jdom.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/jhall.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="../lib/javacsv.jar" />
    <pathelement location="../lib/MRJAdapter.jar" />
    <pathelement location="../lib/vecmath.jar" />
    <pathelement location="../lib/jakarta-regexp-1.5.jar" />
    <pathelement location="${target}/" />  <!-- last to check for name collisions -->
  </path>

  <target name="init" description="create needed directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${target}"/>
    <mkdir dir="${target}/resources" />
  </target>

  <target name="clean" description="remove compilation results to force rebuild">
    <mkdir dir="${target}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${target}"/>
    </delete>
  </target>

  <target name="copyfiles" depends="init" description="copy resource files">
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}/resources/icons/cornwall/">
      <fileset dir="src/resources/icons/cornwall" includes="cornwall_logo.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
  </target>

  <target name="compile" depends="init, copyfiles" description="compile source, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}"
           source="${source_version}" 
           target="${jre_version}" 
           deprecation="${deprecation}"
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="debug" depends="init, copyfiles" description="compile source with debugging on, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           source="${source_version}" 
           target="${jre_version}" 
           deprecation="${deprecation}"
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="rmic" depends="compile" description="build RMI stubs and compile">
    <!-- Run rmic on specified classes -->
    <rmic includes="**/LnMessageBuffer.class, **/LnMessageServer.class"
           base="${target}" 
           stubversion="compat">
       <classpath refid="project.class.path"    />
    </rmic>
  </target>

  <target name="tests" depends="debug" description="compile test classes">
    <!-- Compile the test java code from ${source} into ${target} -->
    <javac srcdir="${test}" 
           destdir="${target}"
           source="${source_version}" 
           target="${jre_version}" 
           deprecation="${deprecation}"
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="decoderpro" depends="debug" description="build and run DecoderPro app">
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <jvmarg value="-Xms10m"/>
       <!-- <jvmarg value="-Xmx60m"/> -->
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
    </java>
 </target>

  <target name="panelpro" depends="debug" description="build and run PanelPro app">
    <java classname="apps.PanelPro.PanelPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <target name="jmridemo" depends="debug" description="build and run JmriDemo app">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
  </target>

  <target name="locotools" depends="debug" description="build and run LocoTools app">
    <java classname="apps.LocoTools.LocoTools"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <target name="cornwall" depends="debug" description="build and run CornwallRR app">
    <java classname="apps.cornwall.CornwallRR"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <!-- Force false language/country to check I8N -->
  <target name="locale" depends="debug" description="check DecoderPro I8N">
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="user.language" value="tlh"/>  <!-- klingon -->
       <sysproperty key="user.country" value="001"/> 
       <arg line="LocaleTestConfig2.xml"/>
       <jvmarg value="-Xms10m"/>
       <!-- <jvmarg value="-Xmx60m"/> -->
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
    </java>
  </target>

  <target name="local" depends="debug" description="build and run decoderpro from local config file">
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <arg line="/Users/jake/Documents/Trains/JMRI/projects/HEAD/ConfigLocal.xml"/>
    </java>
 </target>

  <target name="faceless" depends="debug" description="build and run faceless app">
    <java classname="apps.FacelessApp"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
    </java>
 </target>

  <!-- this really doesn't work, as it doesn't hook up stdin right -->
  <target name="packetpro" depends="debug" description="build and run PacketPro app">
    <exec executable="csh" dir="${jartarget}">
      <arg value="PacketPro.csh"/>
    </exec>
 </target>


  <target name="profile" depends="debug" description="build and run JmriDemo app with profiling">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <jvmarg value="-Xrunhprof:cpu=samples,heap=sites,file=log.txt,depth=10" />
    </java>
  </target>

  <target name="alltest" depends="debug, tests" description="build and run test suite">
    <java classname="apps.tests.AllTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
    </java>
  </target>

  <!-- The next target is NetBeans-specific, but is here so it -->
  <!-- can use other info defined in this file -->
  <target description="run test suite w debug under NetBeans" 
            name="alltest-nb" depends="tests">
        <nbjpdastart addressproperty="jpda.address" name="JMRI" transport="dt_socket">
            <classpath refid="project.class.path"    />
        </nbjpdastart>
        <java classname="apps.tests.AllTest" dir=".." fork="yes">
            <classpath refid="project.class.path"    />
            <sysproperty key="java.security.policy" value="lib/security.policy"/>
            <sysproperty key="apple.laf.useScreenMenuBar" value="true"/>
            <jvmarg value="-Xms10m"/>
            <!-- <jvmarg value="-Xmx60m"/> -->
            <!-- <jvmarg value="-verbose"/> -->
            <!-- <jvmarg value="-verbosegc"/> -->
            <!-- <jvmarg value="-Xloggc:memory.vgc"/> -->
            <!-- for JTune -->
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
        </java>
  </target>

  <target name="jar" depends="compile, rmic"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/jmri.jar" 
         basedir="${target}"
         manifest="manifest" 
         compress="true" />   <!-- compress="true" is default -->
    <!-- Starting with JMRI 1.9, building the JAR index crashes.  -->
    <!-- This appears to be due to a problem with compression in  -->
    <!-- one of the referenced jar files, but we don't know which -->
    <!-- <exec executable="jar" dir="${jartarget}"> -->
    <!--	<arg line="i jmri.jar"/>                -->
    <!-- </exec>                                    -->
  </target>

  <target name="javadoc" depends="init" description="create JavaDocs">
    <javadoc packagenames="jmri.*, apps.*"
           sourcepath="${source}"
           overview="src/jmri/overview.html"
           defaultexcludes="yes"
           destdir="${doctarget}"
           additionalparam="-breakiterator"
           author="true"
           version="false"
           use="true"
           windowtitle="JMRI API">
      <group title="Core" packages="jmri"/>
      <group title="Cross-system Tools" packages="jmri.jmrit:jmri.jmrit.*"/>
      <group title="Layout Connections" packages="jmri.jmrix:jmri.jmrix.*"/>
      <group title="Utilities" packages="jmri.util:jmri.util.*"/>
      <group title="XML persistance" packages="jmri.configurexml:apps.configurexml"/>
      <group title="Applications" packages="apps:apps.*"/>
      <group title="Implementations" packages="jmri.managers:jmri.progdebugger:jmri.layout"/>
	  
      <classpath refid="project.class.path"    />
      <doctitle><![CDATA[<h1>JMRI Library API</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &copy; 1997 - 2005 JMRI Community. 
                    <br>JMRI, DecoderPro, PanelPro, SoundPro, DispatcherPro and associated logos are our trademarks.</i>
                       <br>Site hosted by: 
                       <A href="http://sourceforge.net"> 
                       <IMG src="http://sourceforge.net/sflogo.php?group_id=26788&type=1" width="88" height="31" border="0" alt="SourceForge_Logo"> </A>
                ]]></bottom>
      <link href="http://java.sun.com/j2se/1.4.1/docs/api/" />
    </javadoc>
  </target>

  <target name="uploadjavadoc" depends="javadoc" description="create and upload JavaDocs">
    <exec executable="scp">
      <arg value="-r"/>
      <arg value="${doctarget}"/>
      <arg value="jacobsen@jmri.sf.net:htdocs/JavaDoc/"/>
    </exec>
  </target>

 <!-- dist target forces the jar file to be built without test classes -->
 <target name="dist" depends="clean, init, debug, rmic, jar"
 		 description="create a distribution jar file"/>
	<echo message="jar built with debug contents"/>

</project>


