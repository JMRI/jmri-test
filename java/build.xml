<!-- Ant build.xml file for JMRI development -->
<!-- Bob Jacobsen, Copyright 2002, 2003, 2004, 2007, 2008, 2009, 2010 -->
<!-- Revision $Revision: 1.66 $ -->

<!-- This file is part of JMRI.                                             -->
<!--                                                                        -->
<!-- JMRI is free software; you can redistribute it and/or modify it under  -->
<!-- the terms of version 2 of the GNU General Public License as published  -->
<!-- by the Free Software Foundation. See the "COPYING" file for a copy     -->
<!-- of this license.                                                       -->
<!--                                                                        -->
<!-- JMRI is distributed in the hope that it will be useful, but WITHOUT    -->
<!-- ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  -->
<!-- FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License  -->
<!-- for more details.                                                      -->

<project name="JMRI" default="debug" basedir=".">
<!-- basedir="." means all paths are relative to the "java" subdir -->
<!-- in the project.  We expect that lib et al will be present in -->
<!-- .. from there -->

  <description>
  Provides build services for JMRI libraries and applications
  </description>

  <!-- options you might want to change during development,   -->
  <!-- but please change them back before commiting this file -->
  
    <!-- should compiler warn of use of deprecated APIs? (yes/no) -->
    <property name="deprecation" value="no" />
  
    <!-- SDK version (1.5 as of JMRI 2.5.1) -->
    <property name="sdk_version" value="1.5" />
  
    <!-- source code version (1.5 as of JMRI 2.5.1) -->
    <property name="source_version" value="1.5" />
  
    <!-- JRE version (1.5 as of JMRI 2.5.1) -->
    <property name="jre_version" value="1.5" />
		
		<!-- Set this to the directory where Findbugs is installed if you don't 
		want to use the command line arguments -->
              <!--property name="findbugs.home" value="C:/findbugs-1.3.8" /-->
    
  <!-- You can specify a DecoderPro/PanelPro config file at runtime -->
  <!-- with e.g. "ant -Dantargline=DecoderProFile.xml decoderpro"   -->

  <!-- set global properties for this build -->
  <property name="source" value="src"/>
  <property name="test" value="test"/>
  <property name="target" value="classes"/>
  <property name="jartarget" value=".."/>
  <property name="doctarget" value="doc"/>
  
  <path id="project.class.path">
    <pathelement location=".." />
    <pathelement location="../lib/MRJAdapter.jar" />
    <pathelement location="../lib/RXTXcomm.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/ch.ntb.usb.jar" />
    <pathelement location="../lib/comm-rxtx.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/xercesImpl.jar" />
    <pathelement location="../lib/gluegen-rt.jar" />
    <pathelement location="../lib/javacsv.jar" />
    <pathelement location="../lib/jdom.jar" />
    <pathelement location="../lib/jhall.jar" />
    <pathelement location="../lib/jinput.jar" />
    <pathelement location="../lib/jmdns.jar" />
    <pathelement location="../lib/joal.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/servlet.jar" />
    <pathelement location="../lib/vecmath.jar" />
    <pathelement location="../lib/activation.jar" />
    <pathelement location="../lib/mailapi.jar" />
    <pathelement location="../lib/smtp.jar" />
    <pathelement location="../lib/ExternalLinkContentViewerUI.jar" />
    <pathelement location="/System/Library/Java" /> <!-- MacOS X -->
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jfcunit.jar" />
    <pathelement location="../lib/jakarta-regexp-1.5.jar" />
    <pathelement location="${target}/" />  <!-- last to check for name collisions -->
  </path>
  
	<!-- the classpath used by FindBugs when checking the JMRI jar -->
	<path id="findbugs.aux.class.path">
    <pathelement location="../lib/MRJAdapter.jar" />
    <pathelement location="../lib/RXTXcomm.jar" />
    <pathelement location="../lib/Serialio.jar" />
    <pathelement location="../lib/ch.ntb.usb.jar" />
    <pathelement location="../lib/comm-rxtx.jar" />
    <pathelement location="../lib/comm.jar" />
    <pathelement location="../lib/xercesImpl.jar" />
    <pathelement location="../lib/gluegen-rt.jar" />
    <pathelement location="../lib/javacsv.jar" />
    <pathelement location="../lib/jdom.jar" />
    <pathelement location="../lib/jhall.jar" />
    <pathelement location="../lib/jinput.jar" />
    <pathelement location="../lib/jmdns.jar" />
    <pathelement location="../lib/joal.jar" />
    <pathelement location="../lib/jython.jar" />
    <pathelement location="../lib/log4j.jar" />
    <pathelement location="../lib/servlet.jar" />
    <pathelement location="../lib/vecmath.jar" />
    <pathelement location="../lib/activation.jar" />
    <pathelement location="../lib/mailapi.jar" />
    <pathelement location="../lib/smtp.jar" />
    <pathelement location="../lib/ExternalLinkContentViewerUI.jar" />
    <pathelement location="../lib/junit.jar" />
    <pathelement location="../lib/jfcunit.jar" />
    <pathelement location="../lib/jakarta-regexp-1.5.jar" />
  </path>
	
  <target name="init" description="create needed directories">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${target}"/>
    <mkdir dir="${target}/resources" />
  </target>

  <target name="clean" description="remove compilation results to force rebuild">
    <mkdir dir="${target}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${target}"/>
    </delete>
  </target>

  <target name="copyfiles" depends="init" description="copy resource files">
    <!-- Copy top level resources to include in jar file -->
    <copy todir="${target}/resources/">
      <fileset dir="src/resources" includes="*.gif"  /> 
    </copy>
    <copy todir="${target}/resources/icons/cornwall/">
      <fileset dir="src/resources/icons/cornwall" includes="cornwall_logo.gif"  /> 
    </copy>
    <copy todir="${target}">
      <fileset dir="src/" includes="**/*.properties"  /> 
    </copy>
  </target>

  <target name="compile" depends="init, copyfiles" description="compile source, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}"
           source="${source_version}" 
           target="${jre_version}" 
 	       includeantruntime="false"
           fork="true"
           memoryinitialsize="256m"
           memorymaximumsize="256m"
           deprecation="${deprecation}"
           debug="no" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>



  <!-- Note if modifying the debug target, please be sure to up date the -->
  <!-- NetBeans IDE debug target in nbproject/ide-targets.xml -->
  <target name="debug" depends="init, copyfiles" description="compile source with debugging on, omitting tests">
    <!-- Compile the java code from ${source} into ${target} -->
    <javac srcdir="${source}" 
           destdir="${target}" 
           source="${source_version}" 
           target="${jre_version}" 
 	       includeantruntime="false"
 	       fork="true"
           memoryinitialsize="256m"
           memorymaximumsize="256m"
           debug="yes" >
       <compilerarg value="-Xlint"/>
       <compilerarg value="-Xlint:-serial"/>
       <classpath refid="project.class.path"    />
    </javac>
  </target>


<!-- the next target requires Ant 1.8 or later, which can be obtained from -->
<!-- http://ant.apache.org/bindownload.cgi  -->
<!-- and the Eclipse compiler ecj.jar file -->
<!--                                        -->
<!-- The ecj.warning.options file defines which warnings are one and off -->
<!-- By default, we set them explicitly, so that new ones will show up -->
<!-- See http://help.eclipse.org/galileo/index.jsp?topic=/org.eclipse.jdt.doc.isv/guide/jdt_api_compile.htm -->
<!--                                        -->
  <target name="warnings" depends="clean, init, copyfiles" 
	  description="compile source with warning generation on, omitting tests; requires Ant 1.8 and ecj.jar">
    <!-- Compile the java code from ${source} into ${target} -->
    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
    <javac srcdir="${source}" 
           destdir="${target}" 
           source="${source_version}" 
           target="${jre_version}" 
 	       includeantruntime="false"
           debug="yes" >
       <compilerclasspath>
	      <pathelement path="../lib/ecj.jar" />
       </compilerclasspath>	
       <compilerarg value="@ecj.warning.options"/>
       <classpath refid="project.class.path"    />
    </javac>
  </target>

  <target name="rmic" depends="compile" description="build RMI stubs and compile">
    <!-- Run rmic on specified classes -->
    <rmic includes="**/LnMessageBuffer.class, **/LnMessageServer.class"
           base="${target}" 
           stubversion="compat">
       <classpath refid="project.class.path"    />
    </rmic>
  </target>

  <target name="tests" depends="debug" description="compile test classes">
    <!-- Compile the test java code from ${source} into ${target} -->
    <copy todir="${target}">
        <fileset dir="test/" includes="**/*.properties"  /> 
    </copy>
    <javac srcdir="${test}" 
           destdir="${target}"
           source="${source_version}" 
           target="${jre_version}" 
 	       includeantruntime="false"
           fork="true"
           memoryinitialsize="256m"
           memorymaximumsize="256m"
           deprecation="${deprecation}"
           debug="yes" >
       <classpath refid="project.class.path"    />
    </javac>
  </target>


  <target name="runtime-library-selection">

     <condition property="baseOS" value="windows">
	  <os family="windows" />
     </condition>

     <condition property="baseOS" value="macosx">
	  <os family="mac" />
     </condition>

     <condition property="baseOS" value="linux">
       <and>
	  <os family="unix" />
	  <equals arg1="${os.name}" arg2="Linux" />
       </and>
     </condition>

     <condition property="baseArch" value="x64">
       <and>
	 <os family="windows" />
         <or>
	   <equals arg1="${os.arch}" arg2='x86_64' />
	   <equals arg1="${os.arch}" arg2='x64' />
	   <equals arg1="${os.arch}" arg2='amd64' />
	 </or>
       </and>
     </condition>

     <condition property="baseArch" value="x86">
       <and>
	 <os family="windows" />
         <or>
	   <equals arg1="${os.arch}" arg2='i386' />
	   <equals arg1="${os.arch}" arg2='x86' />
	 </or>
       </and>
     </condition>

     <condition property="baseArch" value="i386">
       <and>
	 <os family="unix" />
	 <or>
	   <equals arg1="${os.arch}" arg2='i386' />
	   <equals arg1="${os.arch}" arg2='i686' />
	 </or>
       </and>
     </condition>

     <condition property="baseArch" value="x86_64">
       <and>
	 <os family="unix" />
	 <or>
	   <equals arg1="${os.arch}" arg2='x86_64' />
	   <equals arg1="${os.arch}" arg2='amd64' />
	 </or>
       </and>
     </condition>

     <property name="arch.lib.path" value="lib/${baseOS}/${baseArch}:lib/${baseOS}" />
  </target>

  <target name="decoderpro" depends="debug, runtime-library-selection" description="build and run DecoderPro app">
    <property name="antargline" value="DecoderProConfig2.xml" />
    <java classname="apps.DecoderPro.DecoderPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
       <arg value="${antargline}"/>
    </java>
 </target>

  <target name="panelpro" depends="debug, runtime-library-selection" description="build and run PanelPro app">
    <property name="antargline" value="PanelProConfig2.xml" />
    <java classname="apps.PanelPro.PanelPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
 </target>

  <target name="soundpro" depends="debug, runtime-library-selection" description="build and run SoundPro app">
    <property name="antargline" value="SoundProConfig2.xml" />
    <java classname="apps.SoundPro.SoundPro"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
 </target>


  <target name="gui3mdi" depends="debug, runtime-library-selection" description="build and run GUI3 MDI demo app">
    <java classname="apps.gui3.demo3.Demo3"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/>
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/>
       <sysproperty key="log4j.ignoreTCL" path="true/"/>
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
       <!-- <arg value="${antargline}"/> -->
    </java>
 </target>


  <target name="gui3ide" depends="debug, runtime-library-selection" description="build and run GUI3 IDE demo app">
    <java classname="apps.gui3.paned.Paned"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/>
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/>
       <sysproperty key="log4j.ignoreTCL" path="true/"/>
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
       <!-- <arg value="${antargline}"/> -->
    </java>
 </target>

  <target name="installtest" depends="debug, runtime-library-selection" description="build and run InstallTest app">
    <property name="antargline" value="InstallTestConfig2.xml" />
    <java classname="apps.InstallTest.InstallTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
 </target>

  <target name="jmridemo" depends="debug, runtime-library-selection" description="build and run JmriDemo app">
    <property name="antargline" value="JmriDemoConfig2.xml" />
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
  </target>

  <target name="locotools" depends="debug, runtime-library-selection" description="build and run LocoTools app">
    <property name="antargline" value="LocoToolsConfig2.xml" />
    <java classname="apps.LocoTools.LocoTools"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
 </target>

  <target name="cornwall" depends="debug, runtime-library-selection" description="build and run CornwallRR app">
    <java classname="apps.cornwall.CornwallRR"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
    </java>
 </target>

  <target name="wizard" depends="debug, runtime-library-selection" description="build and run Wizard app">
    <java classname="apps.wizard.Wizard"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/>
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/>
       <sysproperty key="log4j.ignoreTCL" path="true/"/>
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
    </java>
 </target>

  <!-- Force false language/country to check I8N -->
  <target name="locale" depends="debug, runtime-library-selection" description="check JmriDemo I8N">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
       <sysproperty key="user.language" value="tlh"/>  <!-- klingon -->
       <sysproperty key="user.country" value="001"/> 
       <arg line="LocaleTestConfig2.xml"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
    </java>
  </target>

  <target name="faceless" depends="debug, runtime-library-selection" description="build and run faceless app">
    <java classname="apps.FacelessApp"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
    </java>
  </target>

  <!-- Note if modifying the profile target, please be sure to up date the -->
  <!-- NetBeans IDE profile target in this file -->
  <target name="profile" depends="debug, runtime-library-selection" description="build and run JmriDemo app with profiling">
    <java classname="apps.JmriDemo.JMRIdemo"
          dir=".."
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>
       <jvmarg value="-Xrunhprof:cpu=samples,heap=sites,file=log.txt,depth=10" />
    </java>
  </target>

  <!-- Note if modifying the alltest target, please be sure to up date the -->
  <!-- NetBeans IDE alltest target in nbproject/ide-targets.xml -->
  <target name="alltest" depends="debug, tests, runtime-library-selection" description="build and run test suite">
    <java classname="apps.tests.AllTest"
          dir=".." 
	  fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <arg value="${antargline}"/>
    </java>
  </target>

  <!-- The next target is NetBeans-specific, but is here so it -->
  <!-- can use other info defined in this file -->
  <!-- The profiler is not so well integrated into the IDE and requires -->
  <!-- the build target to be specified in the ANT build script -->
  <target name="profile-nb" depends="debug, runtime-library-selection" description="build and run DecoderPro app with NetBeans profiling">
    <property name="antargline" value="DecoderProConfig2.xml" />
    <fail unless="netbeans.home">This target can only run inside the NetBeans IDE.</fail>
    <nbprofiledirect>
       <classpath refid="project.class.path"    />
    </nbprofiledirect>
    <java classname="apps.DecoderPro.DecoderPro"
            dir=".." 
	        fork="yes" >
       <classpath refid="project.class.path"    />
       <sysproperty key="java.security.policy" value="lib/security.policy"/> 
       <sysproperty key="apple.laf.useScreenMenuBar" value="true"/> 
       <sysproperty key="log4j.ignoreTCL" path="true/"/>       
       <sysproperty key="java.library.path" path=".:lib:${arch.lib.path}"/>       
       <jvmarg value="${profiler.info.jvmargs.agent}"/>
       <!-- <jvmarg value="-verbose"/> -->
       <!-- <jvmarg value="-verbosegc"/> -->
       <!-- <jvmarg value="-Xloggc:memory.vgc"/> --> <!-- for JTune -->
       <arg value="${antargline}"/>
    </java>
  </target>

  <target name="jar" depends="compile, rmic"  
          description="create working jar file with current contents">
    <jar jarfile="${jartarget}/jmri.jar" 
         basedir="${target}"
         manifest="manifest" 
         compress="true" />   <!-- compress="true" is default -->
    <!-- Starting with JMRI 1.9, building the JAR index crashes.  -->
    <!-- This appears to be due to a problem with compression in  -->
    <!-- one of the referenced jar files, but we don't know which -->
    <!-- <exec executable="jar" dir="${jartarget}"> -->
    <!--	<arg line="i jmri.jar"/>                -->
    <!-- </exec>                                    -->
  </target>

  <target name="javadoc-uml" depends="init" description="create JavaDocs with UML">
    <javadoc packagenames="jmri.*, apps.*"
           maxmemory="512m"
           sourcepath="${source}"
           overview="src/jmri/overview.html"
           defaultexcludes="yes"
           destdir="${doctarget}"
           additionalparam="-breakiterator"
           author="true"
           version="false"
           use="true"
           windowtitle="JMRI API">
      <doclet name="org.umlgraph.doclet.UmlGraphDoc"
	        		  path="../lib/UmlGraph-5.2.jar">
	        	        <param name="-attributes" />
	        	        <param name="-operations" />
	        	        <param name="-qualify" />
	        	        <param name="-types" />
	        	        <param name="-visibility" />
      </doclet>
      <group title="Core" packages="jmri"/>
      <group title="Cross-system Tools" packages="jmri.jmrit:jmri.jmrit.*"/>
      <group title="Applications" packages="apps:apps.*"/>
      <group title="Implementations" packages="jmri.implementation:jmri.managers:jmri.progdebugger:jmri.layout"/>
      <group title="Utilities" packages="jmri.util:jmri.util.*"/>
      <group title="XML persistance" packages="jmri.configurexml:apps.configurexml"/>
      <!-- Layout Connections last because so large -->
      <group title="Layout Connections" packages="jmri.jmrix:jmri.jmrix.*"/>
	  
      <classpath refid="project.class.path"    />
      <doctitle><![CDATA[<h1>JMRI Library API</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &copy; 1997 - 2010 JMRI Community. 
                    <br>JMRI, DecoderPro, PanelPro, SoundPro, DispatcherPro and associated logos are our trademarks.</i>
                       <br><a href="http://jmri.org/Copyright.html">Additional information on copyright, trademarks and licenses is linked here.</a>
                       <br>Site hosted by: 
                       <a href="http://sourceforge.net/projects/jmri">
                       <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=26788&type=12" width="120" height="30" border="0" alt="Get JMRI Model Railroad Interface at SourceForge.net. Fast, secure and Free Open Source software downloads" /></a>
                ]]></bottom>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <link href="http://java.sun.com/products/javacomm/reference/api/" />
      <link href="http://users.frii.com/jarvi/rxtx/doc/" />
      <link href="http://www.jdom.org/docs/apidocs/" />
      <link href="http://javacsv.sourceforge.net/" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs/" />
      <link href="http://java.sun.com/javase/technologies/desktop/java3d/forDevelopers/j3dapi/" />
      <link href="http://download.java.net/media/joal/builds/nightly/javadoc_public" />
      <link href="http://java.sun.com/javase/6/docs/api/" />
      <link href="http://download.java.net/media/joal/builds/nightly/javadoc_public" />
    </javadoc>
		<apply executable="dot" dest="${doctarget}" parallel="false">
		    <arg value="-Tpng"/>
		    <arg value="-o"/>
		     <targetfile/>
		     <srcfile/>
		     <fileset dir="${doctarget}" includes="*.dot"/>
		     <mapper type="glob" from="*.dot" to="*.png"/>
		  </apply>
  </target>

  <target name="javadoc" depends="init" description="create JavaDocs">
    <javadoc packagenames="jmri.*, apps.*"
           maxmemory="512m"
           sourcepath="${source}"
           overview="src/jmri/overview.html"
           defaultexcludes="yes"
           destdir="${doctarget}"
           additionalparam="-breakiterator"
           author="true"
           version="false"
           use="true"
           windowtitle="JMRI API">
      <group title="Core" packages="jmri"/>
      <group title="Cross-system Tools" packages="jmri.jmrit:jmri.jmrit.*"/>
      <group title="Applications" packages="apps:apps.*"/>
      <group title="Implementations" packages="jmri.implementation:jmri.managers:jmri.progdebugger:jmri.layout"/>
      <group title="Utilities" packages="jmri.util:jmri.util.*"/>
      <group title="XML persistance" packages="jmri.configurexml:apps.configurexml"/>
      <!-- Layout Connections last because so large -->
      <group title="Layout Connections" packages="jmri.jmrix:jmri.jmrix.*"/>
	  
      <classpath refid="project.class.path"    />
      <doctitle><![CDATA[<h1>JMRI Library API</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &copy; 1997 - 2010 JMRI Community. 
                    <br>JMRI, DecoderPro, PanelPro, SoundPro, DispatcherPro and associated logos are our trademarks.</i>
                       <br><a href="http://jmri.org/Copyright.html">Additional information on copyright, trademarks and licenses is linked here.</a>
                       <br>Site hosted by: 
                       <a href="http://sourceforge.net/projects/jmri">
                       <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=26788&type=12" width="120" height="30" border="0" alt="Get JMRI Model Railroad Interface at SourceForge.net. Fast, secure and Free Open Source software downloads" /></a>
                ]]></bottom>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      <link href="http://java.sun.com/products/javacomm/reference/api/" />
      <link href="http://users.frii.com/jarvi/rxtx/doc/" />
      <link href="http://www.jdom.org/docs/apidocs/" />
      <link href="http://javacsv.sourceforge.net/" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs/" />
      <link href="http://java.sun.com/javase/technologies/desktop/java3d/forDevelopers/j3dapi/" />
      <link href="http://download.java.net/media/joal/builds/nightly/javadoc_public" />
      <link href="http://java.sun.com/javase/6/docs/api/" />
      <link href="http://download.java.net/media/joal/builds/nightly/javadoc_public" />
    </javadoc>
  </target>

  <target name="uploadjavadoc" depends="javadoc" description="create and upload JavaDocs">
    <exec executable="rsync">
      <arg value="-avz"/>
      <arg value="--delete"/>
      <arg value="${doctarget}"/>
      <arg value="jacobsen,jmri@web.sourceforge.net:htdocs/JavaDoc/"/>
    </exec>
  </target>

  <target name="zip" depends="init" 
            description="build a .zip file of decoders">
    <zip
        basedir="${jartarget}"
        destfile="decoders.zip"
        includes="xml/decoders/*.xml"
    />
  </target>
  
  <target name="mark" depends="init" 
            description="mark the Version.java file with today's date">
    <replaceregexp file="${source}/jmri/Version.java"
        match="static public String name(.*)"
        replace="  static public String name() { return &quot;Test build ${DSTAMP}${TSTAMP}(${user.name})&quot;;} // automatically inserted by mark target in ant build"
            />
  </target>
  
 <!-- dist target forces the jar file to be built without test classes -->
 <!-- Note production builds should use compile, not debug, prereq  -->
 <target name="dist" depends="clean, init, debug, rmic, jar"
 		 description="create a distribution jar file"/>
	
 <taskdef name="findbugs" 
    classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
    onerror="ignore"
    classpath="${findbugs.home}/lib/findbugs.jar"
    />
 	
 <target name="findbugs" depends="dist" description="generate FindBugs report. Include &quot;-Dfindbugs.home=YourFindBugsInstallDirectory&quot; in command line." >
 	<findbugs home="${findbugs.home}"
  	      	output="html"
						outputFile="${jartarget}/jmri-fb.html" 
						jvmargs="-Xmx1024m"
						timeout="12000000">
		<auxClasspath refid="findbugs.aux.class.path" />
		<sourcePath path="${source}/" />
	  <class location="${jartarget}/jmri.jar" />
	</findbugs>
 </target>
		 

</project>



 	  	 
