<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: Sensors.shtml,v 1.2 2007-07-01 05:22:49 jacobsen Exp $ -->
<html lang="en">
<head>
  <TITLE>
 	JMRI: Sensor Documentation
  </TITLE>
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">

  <META content="Bob Jacobsen" name=Author>

  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="keywords"
        content="sensor model railroad JMRI decoderpro panelpro">

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<body>
  <div id="container">

<!--#include virtual="Header" -->
<!--#include virtual="Sidebar" -->

    <hr class="hide">

      <div id="mainContent">
      <!-- Page Body -->
        <H2>
		JMRI: Sensor Documentation
        </H2>

<h3>What are Sensors?</h3>

<p>
A Sensor is JMRI's way of representing an input from the layout.
<P>
JMRI will use a Sensor to represent the status of a block occupancy detector,
or a pushbutton on the fascia, or just about anything else you can attach
to an input on your DCC or C/MRI system.

<h3>Controlling a Sensor</h3>

<p>
Generally, you don't control the state of a Sensor object; JMRI, working with the
hardware on your layout, does.  

<P>
But there are some occasions where you might like to locally change the state
of a Sensor:  To debug some logic that uses the Sensor as an input, etc.  It can
be very convenient to temporarily change how a sensor is set without having to 
run out to the layout and push a button or put a locomotive in a block.

<P>
Therefore, we let you locally change a sensor via the Sensor Table (see below), or 
by clicking on a sensor icon on a panel (See the 
<A HREF="">PanelPro pages</a> for more info on panels).

<P>
The change takes effect immediately, but only lasts until the next time you
change it in the program, or the next time the input hardware on the layout changes.
   
<h3>Saving Sensor configuration to disk</h3>

<p>Sensors are saved in your layout configuration file, along with turnouts, 
lights, signal heads, etc.  To store this information on disk, use <b>Store 
Configuration...</b> in the <b>File</b> menu at the top of the Light 
Table (or other tables from the Tools menu), or select <b>Store Panel...</b>
in the <b>Panel</b> menu. 

<A ID="add"><H3>Adding a new Sensor</H3></a>
<p>To create a new Sensor, follow this procedure:</p>
<ol>
	<li><p>Click <b>Sensor Table</b> in the <b>Tools</b> menu to bring up
the Sensor Table, and click the <b>Add...</b> button at the bottom of the 
table to bring up the Add/Edit Sensor window.</p>
	<li><p>Enter a system name, according to the JMRI convention. The first
letter designates your hardware system ('L' for loconet, 'C" for C/MRI,
etc.), and the second letter must be 'S' for Sensor. These are followed by
a number that gives the hardware address of the digital output bit being
referenced.  Examples of valid system addresses are: CS1004, and LS401, 
assuming you have the hardware for the addressed digital input connections.</p>
	</li>
	<li><p>Enter a user name. Any string of characters that is different 
from the user name of other Sensors will be accepted, but it's 
wise to use a string that describes the intended use of the Sensor.
You can leave this blank if you'd like.</p>
	</li>
	<li><p>Click the <b>Create</b> button at the bottom of the window.  
If everything is fine, a message stating "New Sensor added ... " will be 
displayed in the notes area. If there is trouble with anything, an error or 
warning message will be displayed in the notes area; you should then
correct the error and click <b>Create</b> again.</p>
    </li>
    <LI><P>Back in the main Sensor Table, you can then see the current
    status of the Sensor.
</ol>

<!--#include virtual="Footer" -->

      </div><!-- closes #mainContent-->
    </div> <!-- closes #mBody-->
  </div> <!-- closes #container -->
</body>
</html>


