<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: JUnit.shtml,v 1.3 2007-07-01 05:19:08 jacobsen Exp $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Unit testing with JUnit
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code ">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>

<!--#include virtual="Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">

	    <H1>JMRI: Unit testing with JUnit</H1>

JUnit is a system for building "unit tests" of software.  
Unit tests are small tests that make sure that individual
parts of the software do what they're supposed to do.
In a distributed project like JMRI, where there are lots
of developers in only loose communication with each other,
unit tests are a good way to make sure that the code hasn't 
been broken by a change.
<P>
For more information on JUnit, see
<A HREF="http://www.junit.org">the JUnit home page</A>.
A very interesting example of test-based development is available from 
<A HREF="http://www.objectmentor.com/publications/xpepisode.htm">Robert Martin</a>'s new book.
<P>
Some of the classes have JUnit tests available. It's good
to add JUnit tests as you make changes (test your new functionality
to make sure that it is working, and keeps working),
when you have to figure out what somebodys code does
(the test documents exactly what should happen!),
and when you track down a bug (make sure it doesn't come back).

<A ID="run"/>
<h2>Running the Tests</h2>
To run the existing tests, say
<CODE>
<PRE>
   ant alltest
</PRE>
</CODE>
This will compile the test code, which lives in the "test"
subdirectory of the "java" directory in our usual code distributions,
and then run the tests under a GUI.  If you know the name
of your test class, or the test class for your package, you 
can run that directly with the "runtest" script:
<CODE>
<PRE>
   ant tests
   ./runtest.csh jmri.jmrit.powerpanel.PowerPanelTest
</PRE>
</CODE>
The first line compiles all the test code, and the second
runs a specific test.

<A ID="write"/>
<h2>Writing Tests</h2>

By convention, we have a "test" class shadowing 
each real class.  
The "test" directory contains a tree of package
directories parallel to the "src" tree.

<P>
There are additional classes which are used to 
group the test classes for a particular package
into JUnit test suites.

<h3>Writing Additional Tests</h3>

<h3>Writing Tests for a New Class</h3>

<h3>Writing Tests for a New Package</h3>


<!--#include virtual="Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>

