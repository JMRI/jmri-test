
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<!-- $Id: plugins.shtml,v 1.1 2007-07-10 07:00:05 jacobsen Exp $ -->
<html lang="en">
<head>
    <TITLE>
 	JMRI: Plug-in mechanisms
    </TITLE>
    <META content="Bob Jacobsen" name=Author>
    <meta name="keywords" content="JMRI technical code plugins extension plug-in">

    <!-- The combination of "Define" and {Header,Style, Logo and Footer} comments -->
    <!-- are an arbitrary design pattern used by the update.pl script to -->
    <!-- easily replace the common header/footer code for all the web pages -->

    <!-- delete the following 2 Defines if you want to use the default JMRI logo -->
    <!-- or change them to reflect your alternative logo -->

<!-- Style -->
  <META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
  <link rel="stylesheet" type="text/css" href="/css/default.css" media="screen">
  <link rel="stylesheet" type="text/css" href="/css/print.css" media="print">
  <link rel="icon" href="/images/jmri.ico" type="image/png">
  <link rel="home" title="Home" href="/">
<!-- /Style -->
</head>


    <p class="skipLink"><a href="#mainContent" accesskey="2">Skip to main content</a></p>

<!--#include virtual="Header" -->
<!--#include virtual="Sidebar" -->

	<div id="mainContent">


<h1>JMRI: Plug-in mechanisms</h1>

The original goal of the JMRI project was to produce a library upon which people
could use to build their own applications.  Although some people do that, more
use the existing applications such as DecoderPro, PanelPro, LocoTools and
JmriDemo.  We want to make this more flexible by providing a way to extend
those programs without having to rebuild them from scratch.  This note describes
mechanisms for that which will be included in JMRI version 1.4.0

<OL>

<LI>CLASSPATH
<P>
DecoderPro et al are run via a java command which sets the CLASSPATH and
various options.  How that's actually done varies with the platform:  csh
scripts on Unix, bat files on Windows, application bundles on MacOS X, etc.
<P>
To make it easy to add plug-ins, these will include the files "jmriplugins.jar"
and "lib/jmriplugins.jar" in their CLASSPATH.  
<P>
If you use that name for the jar file including your code, it will automatically
be found. You can also put your classes in the "classes" directory of the
startup directory, which is searched first.
<P>
If some other jar file is necessary, you'll have to edit the startup as needed.


<LI>Replacement of existing classes
<P>
Note that you can directly replace any of the files in the jmri.jar distribution
with your own versions by putting them in a jar file that's searched first.  
For example, including a modified version of a .properties file in the 
jmriplugins.jar file would allow you to include customized versions of menu 
strings.  This can also be done with a .class file, for example changing 
the order of menu items by replacing the DecoderPro class.


<LI>Plugin classes
<P>
Replacing a class can cause extra work in the long term, as the replaced
class may be modified as JMRI evolves.  So we also provide a hook on which
to hang new code.  After initialization is complete, the programs will
attempt to invoke a static member of the form:
<PRE>

  package jmri;
  public class JmriPlugin {
     public static void start(javax.swing.JFrame mainFrame, javax.swing.JMenuBar menuBar) {}
  }

</PRE>
This method
can modify the menubar by inserting, modifying or removing menus or menu
items, add buttons to the main panel, etc.  
<p>
As people use this capability, we'll probably want to refactor some existing
classes to make them easier to extend. For example, a monolithic formatting
class like llnmon should be broken up into smaller pieces to make it easier
to add new formats.

</OL>

<!--#include virtual="Footer" -->

	  </div><!-- closes #mainContent-->
	</div> <!-- closes #mBody-->
</body>
</html>
