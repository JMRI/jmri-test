# README for Porting JMRI to use NetBeans

The following notes outline changes that need to happen within the JMRI code to successfully and completely port JMRI to the NetBeans platform. This is an incomplete list.

Most of these changes should only happen when we are comfortable either that:
1. The NetBeans branch can be merged into trunk.
2. Changes in JMRI trunk are unlikely to conflict with changes in the NetBeans branch.

## Start up Buttons Preferences
Since the TrainPro main window will have a ToolBar, and NetBeans provides ToolBar item handling "for free", start up buttons will be replaced with ToolBar items and removed from the Preferences dialog.

To turn an AbstractAction or a JmriAbstractAction into a ToolBar button, the following annotations need to be added to the class:
	@ActionID(
		category = "JMRI",
		id = "org.jmri.toolbar.SomeAction"
	)
	@ActionRegistration(
		iconBase = "org/jmri/toolbar/through.png",
		displayName = "#CTL_SomeAction"
	)
	@ActionReference(path = "Toolbars/File", position = 300)
	@Messages("CTL_SomeAction=My Button")
In this example, the class is SomeAction in the package org.jmri.toolbar.

After adding the above code to the class, the NetBeans platform will ensure the action can be added to any ToolBar in the application.

Following [How to Migrate a Toolbar to the NetBeans Platform (Part 1)](https://blogs.oracle.com/geertjan/entry/how_to_migrate_a_toolbar), existing actions in JMRI Library can be added to the tool bar without modification.

## Localization

Items in `@Messages` annotations will automatically be included in Bundle.properties in the same package where they are declared, and classes using the `@Messages` annotation can refer to the localization keys using `NbBundle.key()` where _key_ is the key used in the annotation.

## Module Structure

Currently there is a core module, __JMRI Library__, that mirrors the JMRI `java/src` and `java\test` code in trunk. This module depends on modules that wrap third party libraries. Ultimately, the wrapper modules should also contain the JMRI code that relies on the wrapped jars (unless a significant number of non-interdependent packages rely on the wrapped jars).

* __JMRI Core__ - this module should depend on every module containing JMRI code that can (and should) be run in headless mode.

Use the [Markdown syntax](http://daringfireball.net/projects/markdown/) when editing this file.